{
  parserClass="eu.adrijaned.intellijvhdlplugin.language.VHDLParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="VHDL"
  psiImplClassSuffix="Impl"
  psiPackage="eu.adrijaned.intellijvhdlplugin.language.psi"
  psiImplPackage="eu.adrijaned.intellijvhdlplugin.language.psi.impl"

  elementTypeHolderClass="eu.adrijaned.intellijvhdlplugin.language.psi.VHDLTypes"
  elementTypeClass="eu.adrijaned.intellijvhdlplugin.language.psi.VHDLElementType"
  tokenTypeClass="eu.adrijaned.intellijvhdlplugin.language.psi.VHDLTokenType"
}

// IEEE Std 1076-2019 Clause 13.1
vhdlFile ::= design_unit design_unit*
design_unit ::= context_clause library_unit
library_unit ::= (primary_unit|secondary_unit)
primary_unit ::= (entity_declaration|configuration_declaration|package_declaration|package_instantiation_declaration|context_declaration|i_PSL_verification_unit)
secondary_unit ::= (architecture_body|package_body)
//TODO
i_PSL_Directive ::= "TODOTODOTODOTODO545424"
i_PSL_Sequence_Declaration ::= "TODOTODOTODOTODO545424"
i_PSL_Property_Declaration ::= "TODOTODOTODOTODO545424"
i_PSL_Clock_Declaration ::= "TODOTODOTODOTODO545424"
i_PSL_verification_unit ::= "TODOTODOTODOTODO545424"


// IEEE Std 1076-2019 Clause 3.2
entity_declaration ::= ENTITY IDENTIFIER IS entity_header entity_declarative_part entity_declaration_statement_part? END ENTITY? i_entity_simple_name? SEMICOLON
private entity_declaration_statement_part ::= BEGIN entity_statement_part
entity_header ::= i_formal_generic_clause? i_formal_port_clause?
private entity_declarative_part ::= entity_declarative_item*
entity_declarative_item ::= (subprogram_declaration|subprogram_body|subprogram_instantiation_declaration|package_declaration|package_body|package_instantiation_declaration|type_declaration|subtype_declaration|mode_view_declaration|constant_declaration|signal_declaration|i_shared_variable_declaration|file_declaration|alias_declaration|attribute_declaration|attribute_specification|disconnection_specification|use_clause|group_template_declaration|group_declaration|i_PSL_Property_Declaration|i_PSL_Sequence_Declaration|i_PSL_Clock_Declaration)
private entity_statement_part ::= entity_statement*
entity_statement ::= (concurrent_assertion_statement|i_passive_concurrent_procedure_call_statement|i_passive_process_statement|i_PSL_Directive)
i_entity_simple_name ::= simple_name
i_formal_generic_clause ::= generic_clause
i_formal_port_clause ::= port_clause
i_passive_concurrent_procedure_call_statement ::= concurrent_procedure_call_statement
i_passive_process_statement ::= process_statement


// IEEE Std 1076-2019 Clause 3.3
architecture_body ::= ARCHITECTURE IDENTIFIER OF i_entity_name IS architecture_declarative_part BEGIN architecture_statement_part END ARCHITECTURE? i_architecture_simple_name? SEMICOLON
private architecture_declarative_part ::= block_declarative_item*
block_declarative_item ::= (subprogram_declaration|subprogram_body|subprogram_instantiation_declaration|package_declaration|package_body|package_instantiation_declaration|type_declaration|subtype_declaration|mode_view_declaration|constant_declaration|signal_declaration|i_shared_variable_declaration|file_declaration|alias_declaration|component_declaration|attribute_declaration|attribute_specification|configuration_specification|disconnection_specification|use_clause|group_template_declaration|group_declaration|i_PSL_Property_Declaration|i_PSL_Sequence_Declaration|i_PSL_Clock_Declaration)
private architecture_statement_part ::= concurrent_statement*
i_entity_name ::= name_s
i_architecture_simple_name ::= simple_name


// IEEE Std 1076-2019 Clause 3.4
configuration_declaration ::= CONFIGURATION IDENTIFIER OF i_entity_name IS configuration_declarative_part (verification_unit_binding_indication SEMICOLON)* block_configuration END CONFIGURATION? i_configuration_simple_name SEMICOLON
private configuration_declarative_part ::= configuration_declarative_item*
configuration_declarative_item ::= (use_clause|attribute_specification|group_declaration)
block_configuration ::= FOR block_specification use_clause* configuration_item* END FOR SEMICOLON
block_specification ::= (i_architecture_name|ii_block_statement_label|generate_statement_label_specification)
generate_statement_label_specification ::= ii_generate_statement_label ( '(' generate_specification ')' )?
generate_specification ::= (i_static_discrete_range|i_static_expression|i_alternative_label)
configuration_item ::= (block_configuration|component_configuration)
component_configuration ::= FOR component_specification (binding_indication SEMICOLON)? (verification_unit_binding_indication SEMICOLON)* block_configuration? END FOR SEMICOLON
i_configuration_simple_name ::= simple_name
i_architecture_name::= name_s
ii_block_statement_label ::= label
ii_generate_statement_label ::= label
i_static_discrete_range ::= discrete_range
i_static_expression ::= expression
i_alternative_label ::= label


// IEEE Std 1076-2019 Clause 4.2
subprogram_declaration ::= subprogram_specification SEMICOLON
subprogram_specification ::= (procedure_specification|function_specification)
procedure_specification ::= PROCEDURE designator subprogram_header (PARAMETER? '(' formal_parameter_list ')')?
function_specification ::= (PURE|IMPURE)? FUNCTION designator subprogram_header (PARAMETER? '(' formal_parameter_list ')' )? RETURN (i_return_identifier OF)? type_mark
subprogram_header ::= ( GENERIC '(' generic_list ')' generic_map_aspect?)?
designator ::= IDENTIFIER | operator_symbol
operator_symbol ::= string_literal
formal_parameter_list ::= i_parameter_interface_list
i_return_identifier ::= IDENTIFIER
i_parameter_interface_list ::= interface_list


// IEEE Std 1076-2019 Clause 4.3
subprogram_body ::= subprogram_specification IS subprogram_declarative_part BEGIN subprogram_statement_part END subprogram_kind? designator? SEMICOLON
private subprogram_declarative_part ::= subprogram_declarative_item*
subprogram_declarative_item ::= (subprogram_declaration|subprogram_body|subprogram_instantiation_declaration|package_declaration|package_body|package_instantiation_declaration|type_declaration|subtype_declaration|constant_declaration|variable_declaration|file_declaration|alias_declaration|attribute_declaration|attribute_specification|use_clause|group_template_declaration|group_declaration)
private subprogram_statement_part ::= sequential_statement*
subprogram_kind ::= (PROCEDURE|FUNCTION)


// IEEE Std 1076-2019 Clause 4.4
subprogram_instantiation_declaration ::= subprogram_kind designator IS NEW ii_uninstantiated_subprogram_name signature? generic_map_aspect? SEMICOLON
ii_uninstantiated_subprogram_name ::= name_s


// IEEE Std 1076-2019 Clause 4.5
signature ::= '[' ( type_mark ( ',' type_mark )* )? ( RETURN type_mark )? ']'


// IEEE Std 1076-2019 Clause 4.7
package_declaration ::= PACKAGE IDENTIFIER IS package_header package_declarative_part END PACKAGE? i_package_simple_name? SEMICOLON
package_header ::= ( generic_clause ( generic_map_aspect SEMICOLON )? )?
private package_declarative_part ::= package_declarative_item
package_declarative_item ::= (subprogram_declaration|subprogram_instantiation_declaration|package_declaration|package_instantiation_declaration|type_declaration|subtype_declaration|mode_view_declaration|constant_declaration|signal_declaration|shared_variable_declaration|file_declaration|alias_declaration|component_declaration|attribute_declaration|attribute_specification|disconnection_specification|use_clause|group_template_declaration|group_declaration|i_PSL_Property_Declaration|i_PSL_Sequence_Declaration)
i_package_simple_name ::= simple_name


// IEEE Std 1076-2019 Clause 4.8
package_body ::= PACKAGE BODY i_package_simple_name IS package_body_declarative_part END PACKAGE? i_package_simple_name? SEMICOLON
private package_body_declarative_part ::= package_body_declarative_item*
package_body_declarative_item ::= (subprogram_declaration|subprogram_body|subprogram_instantiation_declaration|package_declaration|package_body|package_instantiation_declaration|type_declaration|subtype_declaration|constant_declaration|shared_variable_declaration|file_declaration|alias_declaration|attribute_declaration|attribute_specification|use_clause|group_template_declaration|group_declaration)


// IEEE Std 1076-2019 Clause 4.9
package_instantiation_declaration ::= PACKAGE IDENTIFIER IS NEW ii_uninstantiated_package_name generic_map_aspect? SEMICOLON
ii_uninstantiated_package_name ::= name_s


// IEEE Std 1076-2019 Clause 5.2
scalar_type_definition ::= (enumeration_type_definition|integer_type_definition|floating_type_definition|physical_type_definition)
range_constraint ::= RANGE_TOKEN range
range ::= (i_range_attribute_name|simple_range|i_range_expression)
simple_range ::= simple_expression direction simple_expression
direction ::= (TO|DOWNTO)
enumeration_type_definition ::= '(' enumeration_literal (',' enumeration_literal)* ')'
enumeration_literal ::= (IDENTIFIER|character_literal)
integer_type_definition ::= range_constraint
physical_type_definition ::= range_constraint UNITS primary_unit_declaration secondary_unit_declaration* END UNITS ii_physical_type_simple_name?
primary_unit_declaration ::= IDENTIFIER SEMICOLON
secondary_unit_declaration ::= IDENTIFIER '=' physical_literal SEMICOLON
physical_literal ::= abstract_literal? i_unit_name
floating_type_definition ::= range_constraint
i_range_attribute_name ::= attribute_name
i_range_expression ::= expression
ii_physical_type_simple_name ::= simple_name
i_unit_name ::= name_s


// IEEE Std 1076-2019 Clause 5.3
composite_type_definition ::= (array_type_definition|record_type_definition)
array_type_definition ::= (unbounded_array_definition|constrained_array_definition)
unbounded_array_definition ::= ARRAY '(' index_subtype_definition ( ',' index_subtype_definition )* ')' OF i_element_subtype_indication
constrained_array_definition ::= ARRAY index_constraint OF i_element_subtype_indication
index_subtype_definition ::= type_mark RANGE_TOKEN '<>'
array_constraint ::= ((index_constraint array_element_constraint?)|('(' OPEN ')' array_element_constraint?))
array_element_constraint ::= element_constraint
index_constraint ::= '(' discrete_range ( ',' discrete_range )* ')'
discrete_range ::= (i_discrete_subtype_indication|range)
record_type_definition ::= RECORD element_declaration* END RECORD ii_record_type_simple_name?
element_declaration ::= identifier_list ':' element_subtype_definition SEMICOLON
identifier_list ::= IDENTIFIER ( ',' IDENTIFIER )*
element_subtype_definition ::= subtype_indication
record_constraint ::= '(' record_element_constraint ( ',' record_element_constraint )* ')'
record_element_constraint ::= ii_record_element_simple_name element_constraint
i_element_subtype_indication ::= subtype_indication
i_discrete_subtype_indication ::= subtype_indication
ii_record_type_simple_name ::= simple_name
ii_record_element_simple_name ::= simple_name


// IEEE Std 1076-2019 Clause 5.4
access_type_definition ::= ACCESS subtype_indication generic_map_aspect?
incomplete_type_declaration ::= TYPE IDENTIFIER SEMICOLON


// IEEE Std 1076-2019 Clause 5.5
file_type_definition ::= FILE OF type_mark


// IEEE Std 1076-2019 Clause 5.6
protected_type_definition ::= (protected_type_declaration|protected_type_body)
protected_type_declaration ::= PROTECTED protected_type_header protected_type_declarative_part END PROTECTED ii_protected_type_simple_name?
protected_type_header ::= ( generic_clause ( generic_map_aspect SEMICOLON )? )?
private protected_type_declarative_part ::= protected_type_declarative_item*
protected_type_declarative_item ::= (subprogram_declaration|subprogram_instantiation_declaration|attribute_specification|use_clause|private_variable_declaration|alias_declaration)
private_variable_declaration ::= PRIVATE variable_declaration
protected_type_body ::= PROTECTED BODY protected_type_body_declarative_part END PROTECTED BODY ii_protected_type_simple_name
private protected_type_body_declarative_part ::= protected_type_body_declarative_item*
protected_type_body_declarative_item ::= (subprogram_declaration|subprogram_body|subprogram_instantiation_declaration|package_declaration|package_body|package_instantiation_declaration|type_declaration|subtype_declaration|constant_declaration|variable_declaration|file_declaration|alias_declaration|attribute_declaration|attribute_specification|use_clause|group_template_declaration|group_declaration)
protected_type_instantiation_definition ::= NEW subtype_indication generic_map_aspect?
ii_protected_type_simple_name ::= simple_name


// IEEE Std 1076-2019 Clause 5.8
unspecified_type_indication ::= TYPE IS incomplete_type_definition
incomplete_type_definition ::= (private_incomplete_type_definition|scalar_incomplete_type_definition|discrete_incomplete_type_definition|integer_incomplete_type_definition|physical_incomplete_type_definition|floating_incomplete_type_definition|array_incomplete_type_definition|access_incomplete_type_definition|file_incomplete_type_definition)
incomplete_subtype_indication ::= (subtype_indication|unspecified_type_indication)
incomplete_type_mark ::= (type_mark|unspecified_type_indication)
private_incomplete_type_definition ::= PRIVATE_TOKEN
scalar_incomplete_type_definition ::= '<>'
discrete_incomplete_type_definition ::= '(' '<>' ')'
integer_incomplete_type_definition ::= RANGE_TOKEN '<>'
physical_incomplete_type_definition ::= UNITS '<>'
floating_incomplete_type_definition ::= RANGE_TOKEN '<>.<>'
array_incomplete_type_definition ::= ARRAY '(' array_index_incomplete_type_list ')' OF i_element_incomplete_subtype_indication
array_index_incomplete_type_list ::= array_index_incomplete_type ( ',' array_index_incomplete_type )*
array_index_incomplete_type ::= (index_subtype_definition|index_constraint|unspecified_type_indication)
access_incomplete_type_definition ::= ACCESS i_access_incomplete_subtype_indication
file_incomplete_type_definition ::= FILE OF i_file_incomplete_type_mark
i_element_incomplete_subtype_indication ::= incomplete_subtype_indication
i_access_incomplete_subtype_indication ::= incomplete_subtype_indication
i_file_incomplete_type_mark ::= incomplete_type_mark


// IEEE Std 1076-2019 Clause 6.2
type_declaration ::= (full_type_declaration|incomplete_type_declaration)
full_type_declaration ::= TYPE IDENTIFIER IS type_definition SEMICOLON
type_definition ::= (scalar_type_definition|composite_type_definition|access_type_definition|file_type_definition|protected_type_definition|protected_type_instantiation_definition)


// IEEE Std 1076-2019 Clause 6.3
subtype_declaration ::= SUBTYPE IDENTIFIER IS subtype_indication SEMICOLON
subtype_indication ::= resolution_indication? type_mark constraint?
resolution_indication ::= (ii_resolution_function_name|( '(' element_resolution ')' ))
element_resolution ::= array_element_resolution|record_resolution
array_element_resolution ::= resolution_indication
record_resolution ::= record_element_resolution ( ',' record_element_resolution )*
record_element_resolution ::= ii_record_element_simple_name resolution_indication
type_mark ::= (i_type_name|i_subtype_name)
constraint ::= (range_constraint|array_constraint|record_constraint)
element_constraint ::= (array_constraint|record_constraint)
ii_resolution_function_name ::= name_s
i_type_name ::= name_s
i_subtype_name ::= name_s


// IEEE Std 1076-2019 Clause 6.4
object_declaration ::= (constant_declaration|signal_declaration|variable_declaration|file_declaration)
constant_declaration ::= CONSTANT identifier_list ':' subtype_indication ( ':=' conditional_expression )? SEMICOLON
signal_declaration ::= SIGNAL identifier_list ':' subtype_indication signal_kind? ( ':=' conditional_expression )? SEMICOLON
signal_kind ::= (REGISTER|BUS)
private nonshared_variable_declaration ::= VARIABLE identifier_list ':' subtype_indication generic_map_aspect? ( ':=' conditional_expression )? SEMICOLON
variable_declaration ::= SHARED? nonshared_variable_declaration
shared_variable_declaration ::= SHARED nonshared_variable_declaration
//TODO The following is suspicious
i_shared_variable_declaration ::= SHARED nonshared_variable_declaration
file_declaration ::= FILE identifier_list ':' subtype_indication file_open_information? SEMICOLON
file_open_information ::= ( OPEN iii_file_open_kind_expression )? IS file_logical_name
file_logical_name ::= i_string_expression
iii_file_open_kind_expression ::= expression
i_string_expression ::= expression


// IEEE Std 1076-2019 Clause 6.5
interface_declaration ::= (interface_object_declaration|interface_type_declaration|interface_subprogram_declaration|interface_package_declaration)
interface_object_declaration ::= (interface_constant_declaration|interface_signal_declaration|interface_variable_declaration|interface_file_declaration)
interface_constant_declaration ::= CONSTANT? identifier_list ':' IN? interface_type_indication ( ':=' i_static_conditional_expression )?
interface_signal_declaration ::= SIGNAL? identifier_list ':' i_signal_mode_indication
interface_variable_declaration ::= VARIABLE? identifier_list ':' mode? interface_type_indication ( ':=' i_static_conditional_expression )?
interface_file_declaration ::= FILE identifier_list ':' subtype_indication
interface_type_indication ::= (subtype_indication|unspecified_type_indication)
mode_indication ::= (simple_mode_indication|mode_view_indication)
simple_mode_indication ::= mode? interface_type_indication BUS? ( ':=' i_static_conditional_expression )?
mode ::= (IN|OUT|INOUT|BUFFER|LINKAGE)
mode_view_indication ::= (record_mode_view_indication|array_mode_view_indication)
record_mode_view_indication ::= VIEW ii_mode_view_name ( OF i_unresolved_record_subtype_indication )?
array_mode_view_indication ::= VIEW ii_mode_view_name ( OF i_unresolved_array_subtype_indication )?
mode_view_declaration ::= VIEW IDENTIFIER OF i_unresolved_record_subtype_indication IS mode_view_element_definition* END VIEW ii_mode_view_simple_name? SEMICOLON
mode_view_element_definition ::= record_element_list ':' element_mode_indication SEMICOLON
record_element_list ::= ii_record_element_simple_name ( ',' ii_record_element_simple_name )*
element_mode_indication ::= (mode|element_mode_view_indication)
element_mode_view_indication ::= (element_record_mode_view_indication|element_array_mode_view_indication)
element_record_mode_view_indication ::= VIEW ii_mode_view_name
element_array_mode_view_indication ::= VIEW '(' ii_mode_view_name ')'
interface_type_declaration ::= TYPE IDENTIFIER ( IS incomplete_type_definition )?
interface_subprogram_declaration ::= interface_subprogram_specification ( IS interface_subprogram_default )?
interface_subprogram_specification ::= (interface_procedure_specification|interface_function_specification)
interface_procedure_specification ::= PROCEDURE designator ( PARAMETER? '(' formal_parameter_list ')' )?
interface_function_specification ::= (PURE|IMPURE)? FUNCTION designator ( PARAMETER? '(' formal_parameter_list ')' )? RETURN type_mark
interface_subprogram_default ::= (i_subprogram_name|'<>')
interface_package_declaration ::= PACKAGE IDENTIFIER IS NEW ii_uninstantiated_package_name interface_package_generic_map_aspect
interface_package_generic_map_aspect ::= (generic_map_aspect|(GENERIC MAP '(' '<>' ')')|(GENERIC MAP '(' DEFAULT ')'))
interface_list ::= interface_element ( SEMICOLON interface_element )* SEMICOLON?
interface_element ::= interface_declaration
generic_clause ::= GENERIC '(' generic_list ')' SEMICOLON
generic_list ::= i_generic_interface_list
port_clause ::= PORT '(' port_list ')' SEMICOLON
port_list ::= i_port_interface_list
association_list ::= association_element ( ',' association_element )*
association_element ::= (formal_part '=>')? actual_part
formal_part ::= (formal_designator|(i_function_name '(' formal_designator ')')|(type_mark '(' formal_designator ')'))
formal_designator ::= ((i_generic_name signature?)|i_port_name|i_parameter_name)
actual_part ::= (actual_designator|(i_function_name '(' actual_designator ')')|(type_mark '(' actual_designator ')'))
actual_designator ::= ((INERTIAL? conditional_expression)|i_signal_name|i_variable_name|i_file_name|subtype_indication|i_subprogram_name|ii_instantiated_package_name|OPEN)
generic_map_aspect ::= GENERIC MAP '(' i_generic_association_list ')'
port_map_aspect ::= PORT MAP '(' i_port_association_list ')'
i_static_conditional_expression ::= conditional_expression
i_signal_mode_indication ::= mode_indication
ii_mode_view_name ::= name_s
i_unresolved_record_subtype_indication ::= subtype_indication
i_unresolved_array_subtype_indication ::= subtype_indication
ii_mode_view_simple_name ::= simple_name
i_subprogram_name ::= name_s
i_generic_interface_list ::= interface_list
i_port_interface_list ::= interface_list
i_function_name ::= name_s
i_generic_name ::= name_s
i_port_name ::= name_s
i_parameter_name ::= name_s
i_signal_name ::= name_s
i_variable_name ::= name_s
i_file_name ::= name_s
ii_instantiated_package_name ::= name_s
i_generic_association_list ::= association_list
i_port_association_list ::= association_list


// IEEE Std 1076-2019 Clause 6.6
alias_declaration ::= ALIAS alias_designator ( ':' subtype_indication )? IS name_s signature? SEMICOLON
alias_designator ::= (IDENTIFIER|character_literal|operator_symbol)


// IEEE Std 1076-2019 Clause 6.7
attribute_declaration ::= ATTRIBUTE identifier ':' type_mark SEMICOLON


// IEEE Std 1076-2019 Clause 6.8
component_declaration ::= COMPONENT IDENTIFIER IS? i_local_generic_clause? i_local_port_clause? END COMPONENT? i_component_simple_name? SEMICOLON
i_local_generic_clause ::= generic_clause
i_local_port_clause ::= port_clause
i_component_simple_name ::= simple_name


// IEEE Std 1076-2019 Clause 6.9
group_template_declaration ::= GROUP IDENTIFIER IS '(' entity_class_entry_list ')' SEMICOLON
entity_class_entry_list ::= entity_class_entry ( ',' entity_class_entry )*
entity_class_entry ::= entity_class ('<>')?


// IEEE Std 1076-2019 Clause 6.10
group_declaration ::= GROUP IDENTIFIER ':' ii_group_template_name '(' group_constituent_list ')' SEMICOLON
group_constituent_list ::= group_constituent ( ',' group_constituent )*
group_constituent ::= (name_s|character_literal)
ii_group_template_name ::= name_s


// IEEE Std 1076-2019 Clause 7.2
attribute_specification ::= ATTRIBUTE attribute_designator OF entity_specification IS conditional_expression SEMICOLON
entity_specification ::= entity_name_list ':' entity_class
entity_class ::= (ENTITY|ARCHITECTURE|CONFIGURATION|PROCEDURE|FUNCTION|PACKAGE|TYPE|SUBTYPE|CONSTANT|SIGNAL|VARIABLE|COMPONENT|LABEL_TOKEN|LITERAL_TOKEN|UNITS|GROUP|FILE|PROPERTY|SEQUENCE|VIEW)
entity_name_list ::= ((entity_designator ( ',' entity_designator )* )|OTHERS|ALL)
entity_designator ::= entity_tag signature?
entity_tag ::= (simple_name|character_literal|operator_symbol)


// IEEE Std 1076-2019 Clause 7.3
configuration_specification ::= (simple_configuration_specification|compound_configuration_specification)
simple_configuration_specification ::= FOR component_specification binding_indication SEMICOLON (END FOR SEMICOLON)?
compound_configuration_specification ::= FOR component_specification binding_indication SEMICOLON verification_unit_binding_indication SEMICOLON (verification_unit_binding_indication SEMICOLON)* END FOR SEMICOLON
component_specification ::= instantiation_list ':' i_component_name
instantiation_list ::= ((i_instantiation_label ( ',' i_instantiation_label )*)|OTHERS|ALL)
binding_indication ::= ( USE entity_aspect )? generic_map_aspect? port_map_aspect?
entity_aspect ::= ((ENTITY i_entity_name ( '(' i_architecture_identifier ')' )?)|(CONFIGURATION i_configuration_name)|OPEN)
verification_unit_binding_indication ::= USE VUNIT verification_unit_list
verification_unit_list ::= ii_verification_unit_name ( ',' ii_verification_unit_name )*
disconnection_specification ::= DISCONNECT guarded_signal_specification AFTER i_time_expression SEMICOLON
guarded_signal_specification ::= i_guarded_signal_list ':' type_mark
signal_list ::= ((i_signal_name ( ',' i_signal_name )* )|OTHERS|ALL)
i_component_name ::= name_s
i_instantiation_label ::= label
i_architecture_identifier ::= IDENTIFIER
i_configuration_name ::= name_s
ii_verification_unit_name ::= name_s
i_time_expression ::= expression
i_guarded_signal_list ::= signal_list


// IEEE Std 1076-2019 Clause 8.1
name_s ::= (simple_name|operator_symbol|character_literal|selected_name|indexed_name|slice_name|attribute_name|external_name)
prefix ::= (name_s|function_call)


// IEEE Std 1076-2019 Clause 8.2
simple_name ::= IDENTIFIER


// IEEE Std 1076-2019 Clause 8.3
selected_name ::= prefix '.' suffix
suffix ::= (simple_name|character_literal|operator_symbol|all)


// IEEE Std 1076-2019 Clause 8.4
indexed_name ::= prefix '(' expression ( ',' expression )* ')'


// IEEE Std 1076-2019 Clause 8.5
slice_name ::= prefix '(' discrete_range ')'


// IEEE Std 1076-2019 Clause 8.6
attribute_name ::= prefix signature? SINGLE_QUOTE attribute_designator ('(' expression ')')?
attribute_designator ::= i_attribute_simple_name
i_attribute_simple_name ::= simple_name


// IEEE Std 1076-2019 Clause 8.7
external_name ::= (external_constant_name|external_signal_name|external_variable_name)
external_constant_name ::= '<<' CONSTANT external_pathname ':' interface_type_indication '>>'
external_signal_name ::= '<<' SIGNAL external_pathname ':' interface_type_indication '>>'
external_variable_name ::= '<<' VARIABLE external_pathname ':' interface_type_indication '>>'
external_pathname ::= (package_pathname|absolute_pathname|relative_pathname)
package_pathname ::= '@' i_library_logical_name '.' i_package_simple_name '.' ( i_package_simple_name '.' )* i_object_simple_name
absolute_pathname ::= '.' partial_pathname
relative_pathname ::= ( '^' '.' )* partial_pathname
partial_pathname ::= (pathname_element '.')* i_object_simple_name
pathname_element ::= (i_entity_simple_name|ii_component_instantiation_label|i_block_label|(ii_generate_statement_label ( '(' i_static_expression ')' )?)|i_package_simple_name)
i_library_logical_name ::= logical_name
i_object_simple_name ::= simple_name
ii_component_instantiation_label ::= label
i_block_label ::= label


// IEEE Std 1076-2019 Clause 9.1
conditional_or_unaffected_expression ::= expression_or_unaffected ( WHEN condition ELSE expression_or_unaffected )* (WHEN condition)?
expression_or_unaffected ::= (expression|UNAFFECTED)
conditional_expression ::= expression ( WHEN condition ELSE expression )*
expression ::= ((condition_operator primary)|logical_expression)
logical_expression ::= ((relation (AND relation)*)|(relation (OR relation)*)|(relation (XOR relation)*)|(relation (NAND relation)*)|(relation (NOR relation)*)|(relation (XNOR relation)*))
relation ::= shift_expression (relational_operator shift_expression)?
shift_expression ::= simple_expression ::= sign? term (adding_operator term)*
term ::= factor (multiplying_operator factor)*
factor ::= unary_expression ('**' unary_expression)?
unary_expression ::= (primary|(ABS primary)|(NOT primary)|(i_unary_logical_operator primary))
primary ::= (name_s|literal|agregate|function_call|qualified_xpression|type_conversion|allocator|( '(' conditional_expression ')' ))
condition ::= expression
i_unary_logical_operator ::= logical_operator


// IEEE Std 1076-2019 Clause 9.2
condition_operator ::= '??'
logical_operator ::= (AND|OR|NAND|NOR|XOR|XNOR)
relational_operator ::= ('='|'/='|'<'|'<='|'>'|'>='|'?='|'?/='|'?<'|'?<='|'?>'|'?>=')
shift_operator ::= (SLL|SRL|SLA|SRA|ROL|ROR)
adding_operator ::= ('+'|'-'|'&')
sign ::= ('+'|'-')
multiplying_operator ::= ('*'|'/'|MOD|REM)
binary_miscellaneous_operator ::= '**'
unary_miscellaneous_operator ::= (ABS|NOT|i_unary_logical_operator)


// IEEE Std 1076-2019 Clause 9.3
literal ::= (numeric_literal|enumeration_literal|string_literal|bit_string_literal|NULL)
numeric_literal ::= (abstract_literal|physical_literal)
aggregate ::= '(' element_association ( ',' element_association )* ')'
element_association ::= (choices '=>')? expression
choices ::= choice ( '|' choice )*
choice ::= (simple_expression|discrete_range|i_element_simple_name|OTHERS)
function_call ::= i_function_name generic_map_aspect? parameter_map_aspect?
parameter_map_aspect ::= (PARAMETER MAP)? '(' i_parameter_association_list ')'
qualified_xpression ::= ((type_mark SINGLE_QUOTE '(' expression ')' )|(type_mark SINGLE_QUOTE aggregate)|(type_mark SINGLE_QUOTE '(' ')'))
type_conversion ::= type_mark '(' expression ')'
//TODO 9.3.7 looks very weird, annex C shows different form, using annex
allocator ::= ((NEW subtype_indication)|(NEW qualified_xpression))
i_element_simple_name ::= simple_name
i_parameter_association_list ::= association_list


// IEEE Std 1076-2019 Clause 10.1
sequence_of_statements ::= sequential_statement*
sequential_statement ::= (wait_statement|assertion_statement|report_statement|signal_assignment_statement|variable_assignment_statement|procedure_call_statement|if_statement|case_statement|loop_statement|next_statement|exit_statement|return_statement|null_statement|sequential_block_statement)


// IEEE Std 1076-2019 Clause 10.2
wait_statement ::= (label ':')? WAIT sensitivity_clause? condition_clause? timeout_clause? SEMICOLON
sensitivity_clause ::= ON sensitivity_list
sensitivity_list ::= i_signal_name ( ',' i_signal_name )*
condition_clause ::= UNTIL condition
timeout_clause ::=  FOR i_time_expression


// IEEE Std 1076-2019 Clause 10.3
assertion_statement ::= ( label ':' )? assertion SEMICOLON
assertion ::= ASSERT condition (REPORT expression)? (SEVERITY expression)?


// IEEE Std 1076-2019 Clause 10.4
report_statement ::= ( label ':' )? REPORT expression (SEVERITY expression)? SEMICOLON


// IEEE Std 1076-2019 Clause 10.5
signal_assignment_statement ::= (((label ':')? simple_signal_assignment)|((label ':')? conditional_signal_assignment)|((label ':')? selected_signal_assignment))
simple_signal_assignment ::= (simple_waveform_assignment|simple_force_assignment|simple_release_assignment)
simple_waveform_assignment ::= target '<=' delay_mechanism? waveform SEMICOLON
simple_force_assignment ::= target '<=' FORCE force_mode? conditional_or_unaffected_expression SEMICOLON
simple_release_assignment ::= target '<=' RELEASE force_mode? SEMICOLON
force_mode ::= (IN|OUT)
delay_mechanism ::= (TRANSPORT|((REJECT i_time_expression)? INERTIAL))
target ::= (name_s|aggregate)
waveform ::= ((waveform_element ( ',' waveform_element )*)|UNAFFECTED)
waveform_element ::= ((i_value_expression (AFTER i_time_expression)?)|(NULL (AFTER i_time_expression)?))
conditional_signal_assignment ::= target '<=' delay_mechanism? conditional_waveforms SEMICOLON
conditional_waveforms ::= waveform WHEN condition ( ELSE waveform WHEN condition )* ( ELSE waveform )?
selected_signal_assignment ::= (selected_waveform_assignment|selected_force_assignment)
selected_waveform_assignment ::= WITH expression SELECT '?'? target '<=' delay_mechanism? selected_waveforms SEMICOLON
selected_waveforms ::= (waveform WHEN choices ',')* waveform WHEN choices
selected_force_assignment ::= WITH expression SELECT '?'? target '<=' FORCE force_mode? selected_expressions SEMICOLON
selected_expressions ::= (expression WHEN choices ',')* expression WHEN choices
i_value_expression ::= expression


// IEEE Std 1076-2019 Clause 10.6
variable_assignment_statement ::= ((( label ':' )? simple_variable_assignment)|(( label ';' )? selected_variable_assignment))
simple_variable_assignment ::= target ':=' conditional_or_unaffected_expression SEMICOLON
selected_variable_assignment ::= WITH expression SELECT '?'? target ':=' selected_expressions SEMICOLON


// IEEE Std 1076-2019 Clause 10.7
procedure_call_statement ::= ( label ';' )? procedure_call SEMICOLON
procedure_call ::= i_procedure_name generic_map_aspect? parameter_map_aspect?
i_procedure_name ::= name_s


// IEEE Std 1076-2019 Clause 10.8
if_statement ::= ( i_if_label ':' )? IF condition THEN sequence_of_statements ( ELSIF condition THEN sequence_of_statements )* ( ELSE sequence_of_statements )? END IF i_if_label SEMICOLON
// ???WHY??? 😭
sequential_statement_body ::= (sequential_statement_declarative_part BEGIN)? sequence_of_statements
sequential_statement_declarative_part ::= process_declarative_item*
i_if_label ::= label


// IEEE Std 1076-2019 Clause 10.9
case_statement ::= ( i_case_label ':' )? CASE '?'? expression IS case_statement_alternative case_statement_alternative* END CASE '?'? i_case_label? SEMICOLON
case_statement_alternative ::= WHEN choices '=>' sequence_of_statements
i_case_label ::= label


// IEEE Std 1076-2019 Clause 10.10
loop_statement ::= ( i_loop_label ':' )? iteration_scheme? LOOP sequence_of_statements END LOOP i_loop_label? SEMICOLON
iteration_scheme ::= ((WHILE condition)|(FOR i_loop_parameter_specification))
parameter_specification ::= IDENTIFIER IN discrete_range
i_loop_label ::= label
i_loop_parameter_specification ::= parameter_specification


// IEEE Std 1076-2019 Clause 10.11
next_statement ::= ( label ':' )? NEXT i_loop_label? (WHEN condition)? SEMICOLON


// IEEE Std 1076-2019 Clause 10.12
exit_statement ::= ( label ':' )? EXIT i_loop_label? (WHEN condition)? SEMICOLON


// IEEE Std 1076-2019 Clause 10.13
return_statement ::= (plain_return_statement|value_return_statement)
plain_return_statement ::= ( label ':' )? RETURN (WHEN condition)? SEMICOLON
value_return_statement ::= ( label ':' )? RETURN conditional_or_unaffected_expression SEMICOLON


// IEEE Std 1076-2019 Clause 10.14
null_statement ::= ( label ':' )? NULL SEMICOLON


// IEEE Std 1076-2019 Clause 10.15
sequential_block_statement ::= ( ii_sequential_block_label ':' )? BLOCK IS? sequential_block_declarative_part BEGIN sequential_block_statement_part END BLOCK? ii_sequential_block_label? SEMICOLON
sequential_block_declarative_part ::= process_declarative_item*
sequential_block_statement_part ::= sequential_statement*
ii_sequential_block_label ::= label


// IEEE Std 1076-2019 Clause 11.1
concurrent_statement ::= (block_statement|process_statement|concurrent_procedure_call_statement|concurrent_assertion_statement|concurrent_signal_assignment_statement|component_instantiation_statement|generate_statement|i_PSL_Directive)


// IEEE Std 1076-2019 Clause 11.2
block_statement ::= i_block_label ':' BLOCK ( '(' i_guard_condition ')' )? IS? block_header block_declarative_part BEGIN block_statement_part END BLOCK i_block_label? SEMICOLON
block_header ::= (generic_clause (generic_map_aspect SEMICOLON)?)? (port_clause (port_map_aspect SEMICOLON)?)?
block_declarative_part ::= block_declarative_item*
block_statement_part ::= concurrent_statement*
i_guard_condition ::= condition


// IEEE Std 1076-2019 Clause 11.3
process_statement ::= ( i_process_label ':' )? POSTPONED? PROCESS '(' process_sensitivity_list ')' IS? process_declarative_part BEGIN process_statement_part END POSTPONED? PROCESS i_process_label? SEMICOLON
process_sensitivity_list ::= (ALL|sensitivity_list)
process_declarative_part ::= process_declarative_item*
process_declarative_item ::= (subprogram_declaration|subprogram_body|subprogram_instantiation_declaration|package_declaration|package_body|package_instantiation_declaration|type_declaration|subtype_declaration|constant_declaration|variable_declaration|file_declaration|alias_declaration|attribute_declaration|attribute_specification|use_clause|group_template_declaration|group_declaration)
process_statement_part ::= sequential_statement*
i_process_label ::= label


// IEEE Std 1076-2019 Clause 11.4
concurrent_procedure_call_statement ::= ( label ':' )? POSTPONED? procedure_call SEMICOLON


// IEEE Std 1076-2019 Clause 11.5
concurrent_assertion_statement ::= ( label ':' )? POSTPONED? assertion SEMICOLON


// IEEE Std 1076-2019 Clause 11.6
concurrent_signal_assignment_statement ::= ((( label ':' )? POSTPONED? concurrent_simple_signal_assignment)|(( label ':' )? POSTPONED? concurrent_conditional_signal_assignment)|(( label ':' )? POSTPONED? concurrent_selected_signal_assignment))
concurrent_simple_signal_assignment ::= target '<=' GUARDED? delay_mechanism? waveform SEMICOLON
concurrent_conditional_signal_assignment ::= target '<=' GUARDED? delay_mechanism? conditional_waveforms SEMICOLON
concurrent_selected_signal_assignment ::= WITH expression SELECT '?'? target '<=' GUARDED? delay_mechanism? selected_waveforms SEMICOLON


// IEEE Std 1076-2019 Clause 11.7
component_instantiation_statement ::= i_instantiation_label ':' instantiated_unit generic_map_aspect? port_map_aspect? SEMICOLON
instantiated_unit ::= ((COMPONENT? i_component_name)|(ENTITY i_entity_name ( '(' i_architecture_identifier ')' )?)|(CONFIGURATION i_configuration_name))


// IEEE Std 1076-2019 Clause 11.8
generate_statement ::= (for_generate_statement|if_generate_statement|case_generate_statement)
for_generate_statement ::= i_generate_label ':' FOR i_generate_parameter_specification GENERATE generate_statement_body END GENERATE i_generate_label? SEMICOLON
if_generate_statement ::= i_generate_label ':' if ( i_alternative_label ':' )? condition GENERATE generate_statement_body ( ELSIF ( i_alternative_label ':' ) condition GENERATE generate_statement_body )* ( ELSE ( i_alternative_label ':' )? GENERATE generate_statement_body)? END GENERATE i_generate_label? SEMICOLON
case_generate_statement ::= i_generate_label ':' CASE expression GENERATE case_generate_alternative case_generate_alternative* END GENERATE i_generate_label? SEMICOLON
case_generate_alternative ::= WHEN (i_alternative_label ':' )? choices '=>' generate_statement_body
generate_statement_body ::= (block_declarative_part BEGIN)? concurrent_statement* (END ( i_alternative_label ':' )? SEMICOLON)?
label ::= IDENTIFIER
i_generate_label ::= label
i_generate_parameter_specification ::= parameter_specification


// IEEE Std 1076-2019 Clause 12.4
use_clause ::= USE selected_name ( ',' selected_name)* SEMICOLON


// IEEE Std 1076-2019 Clause 13.1 can be found atop this file
// IEEE Std 1076-2019 Clause 13.2
library_clause ::= LIBRARY logical_name_list SEMICOLON
logical_name_list ::= logical_name ( ',' logical_name )*
logical_name ::= IDENTIFIER


// IEEE Std 1076-2019 Clause 13.3
context_declaration ::= CONTEXT IDENTIFIER IS context_clause END CONTEXT? i_context_simple_name? SEMICOLON
i_context_simple_name ::= simple_name


// IEEE Std 1076-2019 Clause 13.4
context_clause ::= context_item*
context_item ::= (library_clause|use_clause|context_reference)
context_reference ::= CONTEXT selected_name ( ',' selected_name )* SEMICOLON


// IEEE Std 1076-2019 Clause 15.5
//TODO extended identifiers, based integer literals
abstract_literal ::= decimal_literal
decimal_literal ::= INTEGER ('.' INTEGER)? exponent?
exponent ::= ((('E'|'e') '+'? INTEGER)|(('E'|'e')'-' INTEGER))


// IEEE Std 1076-2019 Clause 15.6
character_literal ::= CHARACTER_LITERAL_TOKEN


// IEEE Std 1076-2019 Clause 15.7
string_literal ::= STRING_LITERAL_TOKEN
bit_string_literal ::= 'TODOTODOTODOTODO23435445'


// IEEE Std 1076-2019 Clause 15.8
//TODO


// IEEE Std 1076-2019 Clause 15.9
single_line_comment ::= COMMENT
//TODO multiline comments