// This is a generated file. Not intended for manual editing.
package eu.adrijaned.intellijvhdlplugin.language.psi;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.PsiElement;
import com.intellij.lang.ASTNode;
import eu.adrijaned.intellijvhdlplugin.language.psi.impl.*;

public interface VHDLTypes {

  IElementType ABSOLUTE_PATHNAME = new VHDLElementType("ABSOLUTE_PATHNAME");
  IElementType ABSTRACT_LITERAL = new VHDLElementType("ABSTRACT_LITERAL");
  IElementType ACCESS_INCOMPLETE_TYPE_DEFINITION = new VHDLElementType("ACCESS_INCOMPLETE_TYPE_DEFINITION");
  IElementType ACCESS_TYPE_DEFINITION = new VHDLElementType("ACCESS_TYPE_DEFINITION");
  IElementType ACTUAL_DESIGNATOR = new VHDLElementType("ACTUAL_DESIGNATOR");
  IElementType ACTUAL_PART = new VHDLElementType("ACTUAL_PART");
  IElementType ADDING_OPERATOR = new VHDLElementType("ADDING_OPERATOR");
  IElementType AGGREGATE = new VHDLElementType("AGGREGATE");
  IElementType ALIAS_DECLARATION = new VHDLElementType("ALIAS_DECLARATION");
  IElementType ALIAS_DESIGNATOR = new VHDLElementType("ALIAS_DESIGNATOR");
  IElementType ALLOCATOR = new VHDLElementType("ALLOCATOR");
  IElementType ARCHITECTURE_BODY = new VHDLElementType("ARCHITECTURE_BODY");
  IElementType ARRAY_CONSTRAINT = new VHDLElementType("ARRAY_CONSTRAINT");
  IElementType ARRAY_ELEMENT_CONSTRAINT = new VHDLElementType("ARRAY_ELEMENT_CONSTRAINT");
  IElementType ARRAY_ELEMENT_RESOLUTION = new VHDLElementType("ARRAY_ELEMENT_RESOLUTION");
  IElementType ARRAY_INCOMPLETE_TYPE_DEFINITION = new VHDLElementType("ARRAY_INCOMPLETE_TYPE_DEFINITION");
  IElementType ARRAY_INDEX_INCOMPLETE_TYPE = new VHDLElementType("ARRAY_INDEX_INCOMPLETE_TYPE");
  IElementType ARRAY_INDEX_INCOMPLETE_TYPE_LIST = new VHDLElementType("ARRAY_INDEX_INCOMPLETE_TYPE_LIST");
  IElementType ARRAY_MODE_VIEW_INDICATION = new VHDLElementType("ARRAY_MODE_VIEW_INDICATION");
  IElementType ARRAY_TYPE_DEFINITION = new VHDLElementType("ARRAY_TYPE_DEFINITION");
  IElementType ASSERTION = new VHDLElementType("ASSERTION");
  IElementType ASSERTION_STATEMENT = new VHDLElementType("ASSERTION_STATEMENT");
  IElementType ASSOCIATION_ELEMENT = new VHDLElementType("ASSOCIATION_ELEMENT");
  IElementType ASSOCIATION_LIST = new VHDLElementType("ASSOCIATION_LIST");
  IElementType ATTRIBUTE_DECLARATION = new VHDLElementType("ATTRIBUTE_DECLARATION");
  IElementType ATTRIBUTE_DESIGNATOR = new VHDLElementType("ATTRIBUTE_DESIGNATOR");
  IElementType ATTRIBUTE_NAME = new VHDLElementType("ATTRIBUTE_NAME");
  IElementType ATTRIBUTE_SPECIFICATION = new VHDLElementType("ATTRIBUTE_SPECIFICATION");
  IElementType BINARY_MISCELLANEOUS_OPERATOR = new VHDLElementType("BINARY_MISCELLANEOUS_OPERATOR");
  IElementType BINDING_INDICATION = new VHDLElementType("BINDING_INDICATION");
  IElementType BIT_STRING_LITERAL = new VHDLElementType("BIT_STRING_LITERAL");
  IElementType BLOCK_CONFIGURATION = new VHDLElementType("BLOCK_CONFIGURATION");
  IElementType BLOCK_DECLARATIVE_ITEM = new VHDLElementType("BLOCK_DECLARATIVE_ITEM");
  IElementType BLOCK_DECLARATIVE_PART = new VHDLElementType("BLOCK_DECLARATIVE_PART");
  IElementType BLOCK_HEADER = new VHDLElementType("BLOCK_HEADER");
  IElementType BLOCK_SPECIFICATION = new VHDLElementType("BLOCK_SPECIFICATION");
  IElementType BLOCK_STATEMENT = new VHDLElementType("BLOCK_STATEMENT");
  IElementType BLOCK_STATEMENT_PART = new VHDLElementType("BLOCK_STATEMENT_PART");
  IElementType CASE_GENERATE_ALTERNATIVE = new VHDLElementType("CASE_GENERATE_ALTERNATIVE");
  IElementType CASE_GENERATE_STATEMENT = new VHDLElementType("CASE_GENERATE_STATEMENT");
  IElementType CASE_STATEMENT = new VHDLElementType("CASE_STATEMENT");
  IElementType CASE_STATEMENT_ALTERNATIVE = new VHDLElementType("CASE_STATEMENT_ALTERNATIVE");
  IElementType CHARACTER_LITERAL = new VHDLElementType("CHARACTER_LITERAL");
  IElementType CHOICE = new VHDLElementType("CHOICE");
  IElementType CHOICES = new VHDLElementType("CHOICES");
  IElementType COMPONENT_CONFIGURATION = new VHDLElementType("COMPONENT_CONFIGURATION");
  IElementType COMPONENT_DECLARATION = new VHDLElementType("COMPONENT_DECLARATION");
  IElementType COMPONENT_INSTANTIATION_STATEMENT = new VHDLElementType("COMPONENT_INSTANTIATION_STATEMENT");
  IElementType COMPONENT_SPECIFICATION = new VHDLElementType("COMPONENT_SPECIFICATION");
  IElementType COMPOSITE_TYPE_DEFINITION = new VHDLElementType("COMPOSITE_TYPE_DEFINITION");
  IElementType COMPOUND_CONFIGURATION_SPECIFICATION = new VHDLElementType("COMPOUND_CONFIGURATION_SPECIFICATION");
  IElementType CONCURRENT_ASSERTION_STATEMENT = new VHDLElementType("CONCURRENT_ASSERTION_STATEMENT");
  IElementType CONCURRENT_CONDITIONAL_SIGNAL_ASSIGNMENT = new VHDLElementType("CONCURRENT_CONDITIONAL_SIGNAL_ASSIGNMENT");
  IElementType CONCURRENT_PROCEDURE_CALL_STATEMENT = new VHDLElementType("CONCURRENT_PROCEDURE_CALL_STATEMENT");
  IElementType CONCURRENT_SELECTED_SIGNAL_ASSIGNMENT = new VHDLElementType("CONCURRENT_SELECTED_SIGNAL_ASSIGNMENT");
  IElementType CONCURRENT_SIGNAL_ASSIGNMENT_STATEMENT = new VHDLElementType("CONCURRENT_SIGNAL_ASSIGNMENT_STATEMENT");
  IElementType CONCURRENT_SIMPLE_SIGNAL_ASSIGNMENT = new VHDLElementType("CONCURRENT_SIMPLE_SIGNAL_ASSIGNMENT");
  IElementType CONCURRENT_STATEMENT = new VHDLElementType("CONCURRENT_STATEMENT");
  IElementType CONDITION = new VHDLElementType("CONDITION");
  IElementType CONDITIONAL_EXPRESSION = new VHDLElementType("CONDITIONAL_EXPRESSION");
  IElementType CONDITIONAL_OR_UNAFFECTED_EXPRESSION = new VHDLElementType("CONDITIONAL_OR_UNAFFECTED_EXPRESSION");
  IElementType CONDITIONAL_SIGNAL_ASSIGNMENT = new VHDLElementType("CONDITIONAL_SIGNAL_ASSIGNMENT");
  IElementType CONDITIONAL_WAVEFORMS = new VHDLElementType("CONDITIONAL_WAVEFORMS");
  IElementType CONDITION_CLAUSE = new VHDLElementType("CONDITION_CLAUSE");
  IElementType CONDITION_OPERATOR = new VHDLElementType("CONDITION_OPERATOR");
  IElementType CONFIGURATION_DECLARATION = new VHDLElementType("CONFIGURATION_DECLARATION");
  IElementType CONFIGURATION_DECLARATIVE_ITEM = new VHDLElementType("CONFIGURATION_DECLARATIVE_ITEM");
  IElementType CONFIGURATION_ITEM = new VHDLElementType("CONFIGURATION_ITEM");
  IElementType CONFIGURATION_SPECIFICATION = new VHDLElementType("CONFIGURATION_SPECIFICATION");
  IElementType CONSTANT_DECLARATION = new VHDLElementType("CONSTANT_DECLARATION");
  IElementType CONSTRAINED_ARRAY_DEFINITION = new VHDLElementType("CONSTRAINED_ARRAY_DEFINITION");
  IElementType CONSTRAINT = new VHDLElementType("CONSTRAINT");
  IElementType CONTEXT_CLAUSE = new VHDLElementType("CONTEXT_CLAUSE");
  IElementType CONTEXT_DECLARATION = new VHDLElementType("CONTEXT_DECLARATION");
  IElementType CONTEXT_ITEM = new VHDLElementType("CONTEXT_ITEM");
  IElementType CONTEXT_REFERENCE = new VHDLElementType("CONTEXT_REFERENCE");
  IElementType DECIMAL_LITERAL = new VHDLElementType("DECIMAL_LITERAL");
  IElementType DELAY_MECHANISM = new VHDLElementType("DELAY_MECHANISM");
  IElementType DESIGNATOR = new VHDLElementType("DESIGNATOR");
  IElementType DESIGN_UNIT = new VHDLElementType("DESIGN_UNIT");
  IElementType DIRECTION = new VHDLElementType("DIRECTION");
  IElementType DISCONNECTION_SPECIFICATION = new VHDLElementType("DISCONNECTION_SPECIFICATION");
  IElementType DISCRETE_INCOMPLETE_TYPE_DEFINITION = new VHDLElementType("DISCRETE_INCOMPLETE_TYPE_DEFINITION");
  IElementType DISCRETE_RANGE = new VHDLElementType("DISCRETE_RANGE");
  IElementType ELEMENT_ARRAY_MODE_VIEW_INDICATION = new VHDLElementType("ELEMENT_ARRAY_MODE_VIEW_INDICATION");
  IElementType ELEMENT_ASSOCIATION = new VHDLElementType("ELEMENT_ASSOCIATION");
  IElementType ELEMENT_CONSTRAINT = new VHDLElementType("ELEMENT_CONSTRAINT");
  IElementType ELEMENT_DECLARATION = new VHDLElementType("ELEMENT_DECLARATION");
  IElementType ELEMENT_MODE_INDICATION = new VHDLElementType("ELEMENT_MODE_INDICATION");
  IElementType ELEMENT_MODE_VIEW_INDICATION = new VHDLElementType("ELEMENT_MODE_VIEW_INDICATION");
  IElementType ELEMENT_RECORD_MODE_VIEW_INDICATION = new VHDLElementType("ELEMENT_RECORD_MODE_VIEW_INDICATION");
  IElementType ELEMENT_RESOLUTION = new VHDLElementType("ELEMENT_RESOLUTION");
  IElementType ELEMENT_SUBTYPE_DEFINITION = new VHDLElementType("ELEMENT_SUBTYPE_DEFINITION");
  IElementType ENTITY_ASPECT = new VHDLElementType("ENTITY_ASPECT");
  IElementType ENTITY_CLASS = new VHDLElementType("ENTITY_CLASS");
  IElementType ENTITY_CLASS_ENTRY = new VHDLElementType("ENTITY_CLASS_ENTRY");
  IElementType ENTITY_CLASS_ENTRY_LIST = new VHDLElementType("ENTITY_CLASS_ENTRY_LIST");
  IElementType ENTITY_DECLARATION = new VHDLElementType("ENTITY_DECLARATION");
  IElementType ENTITY_DECLARATIVE_ITEM = new VHDLElementType("ENTITY_DECLARATIVE_ITEM");
  IElementType ENTITY_DESIGNATOR = new VHDLElementType("ENTITY_DESIGNATOR");
  IElementType ENTITY_HEADER = new VHDLElementType("ENTITY_HEADER");
  IElementType ENTITY_NAME_LIST = new VHDLElementType("ENTITY_NAME_LIST");
  IElementType ENTITY_SPECIFICATION = new VHDLElementType("ENTITY_SPECIFICATION");
  IElementType ENTITY_STATEMENT = new VHDLElementType("ENTITY_STATEMENT");
  IElementType ENTITY_TAG = new VHDLElementType("ENTITY_TAG");
  IElementType ENUMERATION_LITERAL = new VHDLElementType("ENUMERATION_LITERAL");
  IElementType ENUMERATION_TYPE_DEFINITION = new VHDLElementType("ENUMERATION_TYPE_DEFINITION");
  IElementType EXIT_STATEMENT = new VHDLElementType("EXIT_STATEMENT");
  IElementType EXPONENT = new VHDLElementType("EXPONENT");
  IElementType EXPRESSION = new VHDLElementType("EXPRESSION");
  IElementType EXPRESSION_OR_UNAFFECTED = new VHDLElementType("EXPRESSION_OR_UNAFFECTED");
  IElementType EXTERNAL_CONSTANT_NAME = new VHDLElementType("EXTERNAL_CONSTANT_NAME");
  IElementType EXTERNAL_NAME = new VHDLElementType("EXTERNAL_NAME");
  IElementType EXTERNAL_PATHNAME = new VHDLElementType("EXTERNAL_PATHNAME");
  IElementType EXTERNAL_SIGNAL_NAME = new VHDLElementType("EXTERNAL_SIGNAL_NAME");
  IElementType EXTERNAL_VARIABLE_NAME = new VHDLElementType("EXTERNAL_VARIABLE_NAME");
  IElementType FACTOR = new VHDLElementType("FACTOR");
  IElementType FILE_DECLARATION = new VHDLElementType("FILE_DECLARATION");
  IElementType FILE_INCOMPLETE_TYPE_DEFINITION = new VHDLElementType("FILE_INCOMPLETE_TYPE_DEFINITION");
  IElementType FILE_LOGICAL_NAME = new VHDLElementType("FILE_LOGICAL_NAME");
  IElementType FILE_OPEN_INFORMATION = new VHDLElementType("FILE_OPEN_INFORMATION");
  IElementType FILE_TYPE_DEFINITION = new VHDLElementType("FILE_TYPE_DEFINITION");
  IElementType FLOATING_INCOMPLETE_TYPE_DEFINITION = new VHDLElementType("FLOATING_INCOMPLETE_TYPE_DEFINITION");
  IElementType FLOATING_TYPE_DEFINITION = new VHDLElementType("FLOATING_TYPE_DEFINITION");
  IElementType FORCE_MODE = new VHDLElementType("FORCE_MODE");
  IElementType FORMAL_DESIGNATOR = new VHDLElementType("FORMAL_DESIGNATOR");
  IElementType FORMAL_PARAMETER_LIST = new VHDLElementType("FORMAL_PARAMETER_LIST");
  IElementType FORMAL_PART = new VHDLElementType("FORMAL_PART");
  IElementType FOR_GENERATE_STATEMENT = new VHDLElementType("FOR_GENERATE_STATEMENT");
  IElementType FULL_TYPE_DECLARATION = new VHDLElementType("FULL_TYPE_DECLARATION");
  IElementType FUNCTION_CALL = new VHDLElementType("FUNCTION_CALL");
  IElementType FUNCTION_SPECIFICATION = new VHDLElementType("FUNCTION_SPECIFICATION");
  IElementType GENERATE_SPECIFICATION = new VHDLElementType("GENERATE_SPECIFICATION");
  IElementType GENERATE_STATEMENT = new VHDLElementType("GENERATE_STATEMENT");
  IElementType GENERATE_STATEMENT_BODY = new VHDLElementType("GENERATE_STATEMENT_BODY");
  IElementType GENERATE_STATEMENT_LABEL_SPECIFICATION = new VHDLElementType("GENERATE_STATEMENT_LABEL_SPECIFICATION");
  IElementType GENERIC_CLAUSE = new VHDLElementType("GENERIC_CLAUSE");
  IElementType GENERIC_LIST = new VHDLElementType("GENERIC_LIST");
  IElementType GENERIC_MAP_ASPECT = new VHDLElementType("GENERIC_MAP_ASPECT");
  IElementType GROUP_CONSTITUENT = new VHDLElementType("GROUP_CONSTITUENT");
  IElementType GROUP_CONSTITUENT_LIST = new VHDLElementType("GROUP_CONSTITUENT_LIST");
  IElementType GROUP_DECLARATION = new VHDLElementType("GROUP_DECLARATION");
  IElementType GROUP_TEMPLATE_DECLARATION = new VHDLElementType("GROUP_TEMPLATE_DECLARATION");
  IElementType GUARDED_SIGNAL_SPECIFICATION = new VHDLElementType("GUARDED_SIGNAL_SPECIFICATION");
  IElementType IDENTIFIER_LIST = new VHDLElementType("IDENTIFIER_LIST");
  IElementType IF_GENERATE_STATEMENT = new VHDLElementType("IF_GENERATE_STATEMENT");
  IElementType IF_STATEMENT = new VHDLElementType("IF_STATEMENT");
  IElementType III_FILE_OPEN_KIND_EXPRESSION = new VHDLElementType("III_FILE_OPEN_KIND_EXPRESSION");
  IElementType II_BLOCK_STATEMENT_LABEL = new VHDLElementType("II_BLOCK_STATEMENT_LABEL");
  IElementType II_COMPONENT_INSTANTIATION_LABEL = new VHDLElementType("II_COMPONENT_INSTANTIATION_LABEL");
  IElementType II_GENERATE_STATEMENT_LABEL = new VHDLElementType("II_GENERATE_STATEMENT_LABEL");
  IElementType II_GROUP_TEMPLATE_NAME = new VHDLElementType("II_GROUP_TEMPLATE_NAME");
  IElementType II_INSTANTIATED_PACKAGE_NAME = new VHDLElementType("II_INSTANTIATED_PACKAGE_NAME");
  IElementType II_MODE_VIEW_NAME = new VHDLElementType("II_MODE_VIEW_NAME");
  IElementType II_MODE_VIEW_SIMPLE_NAME = new VHDLElementType("II_MODE_VIEW_SIMPLE_NAME");
  IElementType II_PHYSICAL_TYPE_SIMPLE_NAME = new VHDLElementType("II_PHYSICAL_TYPE_SIMPLE_NAME");
  IElementType II_PROTECTED_TYPE_SIMPLE_NAME = new VHDLElementType("II_PROTECTED_TYPE_SIMPLE_NAME");
  IElementType II_RECORD_ELEMENT_SIMPLE_NAME = new VHDLElementType("II_RECORD_ELEMENT_SIMPLE_NAME");
  IElementType II_RECORD_TYPE_SIMPLE_NAME = new VHDLElementType("II_RECORD_TYPE_SIMPLE_NAME");
  IElementType II_RESOLUTION_FUNCTION_NAME = new VHDLElementType("II_RESOLUTION_FUNCTION_NAME");
  IElementType II_SEQUENTIAL_BLOCK_LABEL = new VHDLElementType("II_SEQUENTIAL_BLOCK_LABEL");
  IElementType II_UNINSTANTIATED_PACKAGE_NAME = new VHDLElementType("II_UNINSTANTIATED_PACKAGE_NAME");
  IElementType II_UNINSTANTIATED_SUBPROGRAM_NAME = new VHDLElementType("II_UNINSTANTIATED_SUBPROGRAM_NAME");
  IElementType II_VERIFICATION_UNIT_NAME = new VHDLElementType("II_VERIFICATION_UNIT_NAME");
  IElementType INCOMPLETE_SUBTYPE_INDICATION = new VHDLElementType("INCOMPLETE_SUBTYPE_INDICATION");
  IElementType INCOMPLETE_TYPE_DECLARATION = new VHDLElementType("INCOMPLETE_TYPE_DECLARATION");
  IElementType INCOMPLETE_TYPE_DEFINITION = new VHDLElementType("INCOMPLETE_TYPE_DEFINITION");
  IElementType INCOMPLETE_TYPE_MARK = new VHDLElementType("INCOMPLETE_TYPE_MARK");
  IElementType INDEXED_NAME = new VHDLElementType("INDEXED_NAME");
  IElementType INDEX_CONSTRAINT = new VHDLElementType("INDEX_CONSTRAINT");
  IElementType INDEX_SUBTYPE_DEFINITION = new VHDLElementType("INDEX_SUBTYPE_DEFINITION");
  IElementType INSTANTIATED_UNIT = new VHDLElementType("INSTANTIATED_UNIT");
  IElementType INSTANTIATION_LIST = new VHDLElementType("INSTANTIATION_LIST");
  IElementType INTEGER_INCOMPLETE_TYPE_DEFINITION = new VHDLElementType("INTEGER_INCOMPLETE_TYPE_DEFINITION");
  IElementType INTEGER_TYPE_DEFINITION = new VHDLElementType("INTEGER_TYPE_DEFINITION");
  IElementType INTERFACE_CONSTANT_DECLARATION = new VHDLElementType("INTERFACE_CONSTANT_DECLARATION");
  IElementType INTERFACE_DECLARATION = new VHDLElementType("INTERFACE_DECLARATION");
  IElementType INTERFACE_ELEMENT = new VHDLElementType("INTERFACE_ELEMENT");
  IElementType INTERFACE_FILE_DECLARATION = new VHDLElementType("INTERFACE_FILE_DECLARATION");
  IElementType INTERFACE_FUNCTION_SPECIFICATION = new VHDLElementType("INTERFACE_FUNCTION_SPECIFICATION");
  IElementType INTERFACE_LIST = new VHDLElementType("INTERFACE_LIST");
  IElementType INTERFACE_OBJECT_DECLARATION = new VHDLElementType("INTERFACE_OBJECT_DECLARATION");
  IElementType INTERFACE_PACKAGE_DECLARATION = new VHDLElementType("INTERFACE_PACKAGE_DECLARATION");
  IElementType INTERFACE_PACKAGE_GENERIC_MAP_ASPECT = new VHDLElementType("INTERFACE_PACKAGE_GENERIC_MAP_ASPECT");
  IElementType INTERFACE_PROCEDURE_SPECIFICATION = new VHDLElementType("INTERFACE_PROCEDURE_SPECIFICATION");
  IElementType INTERFACE_SIGNAL_DECLARATION = new VHDLElementType("INTERFACE_SIGNAL_DECLARATION");
  IElementType INTERFACE_SUBPROGRAM_DECLARATION = new VHDLElementType("INTERFACE_SUBPROGRAM_DECLARATION");
  IElementType INTERFACE_SUBPROGRAM_DEFAULT = new VHDLElementType("INTERFACE_SUBPROGRAM_DEFAULT");
  IElementType INTERFACE_SUBPROGRAM_SPECIFICATION = new VHDLElementType("INTERFACE_SUBPROGRAM_SPECIFICATION");
  IElementType INTERFACE_TYPE_DECLARATION = new VHDLElementType("INTERFACE_TYPE_DECLARATION");
  IElementType INTERFACE_TYPE_INDICATION = new VHDLElementType("INTERFACE_TYPE_INDICATION");
  IElementType INTERFACE_VARIABLE_DECLARATION = new VHDLElementType("INTERFACE_VARIABLE_DECLARATION");
  IElementType ITERATION_SCHEME = new VHDLElementType("ITERATION_SCHEME");
  IElementType I_ACCESS_INCOMPLETE_SUBTYPE_INDICATION = new VHDLElementType("I_ACCESS_INCOMPLETE_SUBTYPE_INDICATION");
  IElementType I_ALTERNATIVE_LABEL = new VHDLElementType("I_ALTERNATIVE_LABEL");
  IElementType I_ARCHITECTURE_IDENTIFIER = new VHDLElementType("I_ARCHITECTURE_IDENTIFIER");
  IElementType I_ARCHITECTURE_NAME = new VHDLElementType("I_ARCHITECTURE_NAME");
  IElementType I_ARCHITECTURE_SIMPLE_NAME = new VHDLElementType("I_ARCHITECTURE_SIMPLE_NAME");
  IElementType I_ATTRIBUTE_SIMPLE_NAME = new VHDLElementType("I_ATTRIBUTE_SIMPLE_NAME");
  IElementType I_BLOCK_LABEL = new VHDLElementType("I_BLOCK_LABEL");
  IElementType I_CASE_LABEL = new VHDLElementType("I_CASE_LABEL");
  IElementType I_COMPONENT_NAME = new VHDLElementType("I_COMPONENT_NAME");
  IElementType I_COMPONENT_SIMPLE_NAME = new VHDLElementType("I_COMPONENT_SIMPLE_NAME");
  IElementType I_CONFIGURATION_NAME = new VHDLElementType("I_CONFIGURATION_NAME");
  IElementType I_CONFIGURATION_SIMPLE_NAME = new VHDLElementType("I_CONFIGURATION_SIMPLE_NAME");
  IElementType I_CONTEXT_SIMPLE_NAME = new VHDLElementType("I_CONTEXT_SIMPLE_NAME");
  IElementType I_DISCRETE_SUBTYPE_INDICATION = new VHDLElementType("I_DISCRETE_SUBTYPE_INDICATION");
  IElementType I_ELEMENT_INCOMPLETE_SUBTYPE_INDICATION = new VHDLElementType("I_ELEMENT_INCOMPLETE_SUBTYPE_INDICATION");
  IElementType I_ELEMENT_SIMPLE_NAME = new VHDLElementType("I_ELEMENT_SIMPLE_NAME");
  IElementType I_ELEMENT_SUBTYPE_INDICATION = new VHDLElementType("I_ELEMENT_SUBTYPE_INDICATION");
  IElementType I_ENTITY_NAME = new VHDLElementType("I_ENTITY_NAME");
  IElementType I_ENTITY_SIMPLE_NAME = new VHDLElementType("I_ENTITY_SIMPLE_NAME");
  IElementType I_FILE_INCOMPLETE_TYPE_MARK = new VHDLElementType("I_FILE_INCOMPLETE_TYPE_MARK");
  IElementType I_FILE_NAME = new VHDLElementType("I_FILE_NAME");
  IElementType I_FORMAL_GENERIC_CLAUSE = new VHDLElementType("I_FORMAL_GENERIC_CLAUSE");
  IElementType I_FORMAL_PORT_CLAUSE = new VHDLElementType("I_FORMAL_PORT_CLAUSE");
  IElementType I_FUNCTION_NAME = new VHDLElementType("I_FUNCTION_NAME");
  IElementType I_GENERATE_LABEL = new VHDLElementType("I_GENERATE_LABEL");
  IElementType I_GENERATE_PARAMETER_SPECIFICATION = new VHDLElementType("I_GENERATE_PARAMETER_SPECIFICATION");
  IElementType I_GENERIC_ASSOCIATION_LIST = new VHDLElementType("I_GENERIC_ASSOCIATION_LIST");
  IElementType I_GENERIC_INTERFACE_LIST = new VHDLElementType("I_GENERIC_INTERFACE_LIST");
  IElementType I_GENERIC_NAME = new VHDLElementType("I_GENERIC_NAME");
  IElementType I_GUARDED_SIGNAL_LIST = new VHDLElementType("I_GUARDED_SIGNAL_LIST");
  IElementType I_GUARD_CONDITION = new VHDLElementType("I_GUARD_CONDITION");
  IElementType I_IF_LABEL = new VHDLElementType("I_IF_LABEL");
  IElementType I_INSTANTIATION_LABEL = new VHDLElementType("I_INSTANTIATION_LABEL");
  IElementType I_LIBRARY_LOGICAL_NAME = new VHDLElementType("I_LIBRARY_LOGICAL_NAME");
  IElementType I_LOCAL_GENERIC_CLAUSE = new VHDLElementType("I_LOCAL_GENERIC_CLAUSE");
  IElementType I_LOCAL_PORT_CLAUSE = new VHDLElementType("I_LOCAL_PORT_CLAUSE");
  IElementType I_LOOP_LABEL = new VHDLElementType("I_LOOP_LABEL");
  IElementType I_LOOP_PARAMETER_SPECIFICATION = new VHDLElementType("I_LOOP_PARAMETER_SPECIFICATION");
  IElementType I_OBJECT_SIMPLE_NAME = new VHDLElementType("I_OBJECT_SIMPLE_NAME");
  IElementType I_PACKAGE_SIMPLE_NAME = new VHDLElementType("I_PACKAGE_SIMPLE_NAME");
  IElementType I_PARAMETER_ASSOCIATION_LIST = new VHDLElementType("I_PARAMETER_ASSOCIATION_LIST");
  IElementType I_PARAMETER_INTERFACE_LIST = new VHDLElementType("I_PARAMETER_INTERFACE_LIST");
  IElementType I_PARAMETER_NAME = new VHDLElementType("I_PARAMETER_NAME");
  IElementType I_PASSIVE_CONCURRENT_PROCEDURE_CALL_STATEMENT = new VHDLElementType("I_PASSIVE_CONCURRENT_PROCEDURE_CALL_STATEMENT");
  IElementType I_PASSIVE_PROCESS_STATEMENT = new VHDLElementType("I_PASSIVE_PROCESS_STATEMENT");
  IElementType I_PORT_ASSOCIATION_LIST = new VHDLElementType("I_PORT_ASSOCIATION_LIST");
  IElementType I_PORT_INTERFACE_LIST = new VHDLElementType("I_PORT_INTERFACE_LIST");
  IElementType I_PORT_NAME = new VHDLElementType("I_PORT_NAME");
  IElementType I_PROCEDURE_NAME = new VHDLElementType("I_PROCEDURE_NAME");
  IElementType I_PROCESS_LABEL = new VHDLElementType("I_PROCESS_LABEL");
  IElementType I_PSL_CLOCK_DECLARATION = new VHDLElementType("I_PSL_CLOCK_DECLARATION");
  IElementType I_PSL_DIRECTIVE = new VHDLElementType("I_PSL_DIRECTIVE");
  IElementType I_PSL_PROPERTY_DECLARATION = new VHDLElementType("I_PSL_PROPERTY_DECLARATION");
  IElementType I_PSL_SEQUENCE_DECLARATION = new VHDLElementType("I_PSL_SEQUENCE_DECLARATION");
  IElementType I_PSL_VERIFICATION_UNIT = new VHDLElementType("I_PSL_VERIFICATION_UNIT");
  IElementType I_RANGE_ATTRIBUTE_NAME = new VHDLElementType("I_RANGE_ATTRIBUTE_NAME");
  IElementType I_RANGE_EXPRESSION = new VHDLElementType("I_RANGE_EXPRESSION");
  IElementType I_RETURN_IDENTIFIER = new VHDLElementType("I_RETURN_IDENTIFIER");
  IElementType I_SHARED_VARIABLE_DECLARATION = new VHDLElementType("I_SHARED_VARIABLE_DECLARATION");
  IElementType I_SIGNAL_MODE_INDICATION = new VHDLElementType("I_SIGNAL_MODE_INDICATION");
  IElementType I_SIGNAL_NAME = new VHDLElementType("I_SIGNAL_NAME");
  IElementType I_STATIC_CONDITIONAL_EXPRESSION = new VHDLElementType("I_STATIC_CONDITIONAL_EXPRESSION");
  IElementType I_STATIC_DISCRETE_RANGE = new VHDLElementType("I_STATIC_DISCRETE_RANGE");
  IElementType I_STATIC_EXPRESSION = new VHDLElementType("I_STATIC_EXPRESSION");
  IElementType I_STRING_EXPRESSION = new VHDLElementType("I_STRING_EXPRESSION");
  IElementType I_SUBPROGRAM_NAME = new VHDLElementType("I_SUBPROGRAM_NAME");
  IElementType I_SUBTYPE_NAME = new VHDLElementType("I_SUBTYPE_NAME");
  IElementType I_TIME_EXPRESSION = new VHDLElementType("I_TIME_EXPRESSION");
  IElementType I_TYPE_NAME = new VHDLElementType("I_TYPE_NAME");
  IElementType I_UNARY_LOGICAL_OPERATOR = new VHDLElementType("I_UNARY_LOGICAL_OPERATOR");
  IElementType I_UNIT_NAME = new VHDLElementType("I_UNIT_NAME");
  IElementType I_UNRESOLVED_ARRAY_SUBTYPE_INDICATION = new VHDLElementType("I_UNRESOLVED_ARRAY_SUBTYPE_INDICATION");
  IElementType I_UNRESOLVED_RECORD_SUBTYPE_INDICATION = new VHDLElementType("I_UNRESOLVED_RECORD_SUBTYPE_INDICATION");
  IElementType I_VALUE_EXPRESSION = new VHDLElementType("I_VALUE_EXPRESSION");
  IElementType I_VARIABLE_NAME = new VHDLElementType("I_VARIABLE_NAME");
  IElementType LABEL = new VHDLElementType("LABEL");
  IElementType LIBRARY_CLAUSE = new VHDLElementType("LIBRARY_CLAUSE");
  IElementType LIBRARY_UNIT = new VHDLElementType("LIBRARY_UNIT");
  IElementType LITERAL = new VHDLElementType("LITERAL");
  IElementType LOGICAL_EXPRESSION = new VHDLElementType("LOGICAL_EXPRESSION");
  IElementType LOGICAL_NAME = new VHDLElementType("LOGICAL_NAME");
  IElementType LOGICAL_NAME_LIST = new VHDLElementType("LOGICAL_NAME_LIST");
  IElementType LOGICAL_OPERATOR = new VHDLElementType("LOGICAL_OPERATOR");
  IElementType LOOP_STATEMENT = new VHDLElementType("LOOP_STATEMENT");
  IElementType MODE = new VHDLElementType("MODE");
  IElementType MODE_INDICATION = new VHDLElementType("MODE_INDICATION");
  IElementType MODE_VIEW_DECLARATION = new VHDLElementType("MODE_VIEW_DECLARATION");
  IElementType MODE_VIEW_ELEMENT_DEFINITION = new VHDLElementType("MODE_VIEW_ELEMENT_DEFINITION");
  IElementType MODE_VIEW_INDICATION = new VHDLElementType("MODE_VIEW_INDICATION");
  IElementType MULTIPLYING_OPERATOR = new VHDLElementType("MULTIPLYING_OPERATOR");
  IElementType NAME_S = new VHDLElementType("NAME_S");
  IElementType NEXT_STATEMENT = new VHDLElementType("NEXT_STATEMENT");
  IElementType NULL_STATEMENT = new VHDLElementType("NULL_STATEMENT");
  IElementType NUMERIC_LITERAL = new VHDLElementType("NUMERIC_LITERAL");
  IElementType OBJECT_DECLARATION = new VHDLElementType("OBJECT_DECLARATION");
  IElementType OPERATOR_SYMBOL = new VHDLElementType("OPERATOR_SYMBOL");
  IElementType PACKAGE_BODY = new VHDLElementType("PACKAGE_BODY");
  IElementType PACKAGE_BODY_DECLARATIVE_ITEM = new VHDLElementType("PACKAGE_BODY_DECLARATIVE_ITEM");
  IElementType PACKAGE_DECLARATION = new VHDLElementType("PACKAGE_DECLARATION");
  IElementType PACKAGE_DECLARATIVE_ITEM = new VHDLElementType("PACKAGE_DECLARATIVE_ITEM");
  IElementType PACKAGE_HEADER = new VHDLElementType("PACKAGE_HEADER");
  IElementType PACKAGE_INSTANTIATION_DECLARATION = new VHDLElementType("PACKAGE_INSTANTIATION_DECLARATION");
  IElementType PACKAGE_PATHNAME = new VHDLElementType("PACKAGE_PATHNAME");
  IElementType PARAMETER_MAP_ASPECT = new VHDLElementType("PARAMETER_MAP_ASPECT");
  IElementType PARAMETER_SPECIFICATION = new VHDLElementType("PARAMETER_SPECIFICATION");
  IElementType PARTIAL_PATHNAME = new VHDLElementType("PARTIAL_PATHNAME");
  IElementType PATHNAME_ELEMENT = new VHDLElementType("PATHNAME_ELEMENT");
  IElementType PHYSICAL_INCOMPLETE_TYPE_DEFINITION = new VHDLElementType("PHYSICAL_INCOMPLETE_TYPE_DEFINITION");
  IElementType PHYSICAL_LITERAL = new VHDLElementType("PHYSICAL_LITERAL");
  IElementType PHYSICAL_TYPE_DEFINITION = new VHDLElementType("PHYSICAL_TYPE_DEFINITION");
  IElementType PLAIN_RETURN_STATEMENT = new VHDLElementType("PLAIN_RETURN_STATEMENT");
  IElementType PORT_CLAUSE = new VHDLElementType("PORT_CLAUSE");
  IElementType PORT_LIST = new VHDLElementType("PORT_LIST");
  IElementType PORT_MAP_ASPECT = new VHDLElementType("PORT_MAP_ASPECT");
  IElementType PREFIX = new VHDLElementType("PREFIX");
  IElementType PRIMARY = new VHDLElementType("PRIMARY");
  IElementType PRIMARY_UNIT = new VHDLElementType("PRIMARY_UNIT");
  IElementType PRIMARY_UNIT_DECLARATION = new VHDLElementType("PRIMARY_UNIT_DECLARATION");
  IElementType PRIVATE_INCOMPLETE_TYPE_DEFINITION = new VHDLElementType("PRIVATE_INCOMPLETE_TYPE_DEFINITION");
  IElementType PRIVATE_VARIABLE_DECLARATION = new VHDLElementType("PRIVATE_VARIABLE_DECLARATION");
  IElementType PROCEDURE_CALL = new VHDLElementType("PROCEDURE_CALL");
  IElementType PROCEDURE_CALL_STATEMENT = new VHDLElementType("PROCEDURE_CALL_STATEMENT");
  IElementType PROCEDURE_SPECIFICATION = new VHDLElementType("PROCEDURE_SPECIFICATION");
  IElementType PROCESS_DECLARATIVE_ITEM = new VHDLElementType("PROCESS_DECLARATIVE_ITEM");
  IElementType PROCESS_DECLARATIVE_PART = new VHDLElementType("PROCESS_DECLARATIVE_PART");
  IElementType PROCESS_SENSITIVITY_LIST = new VHDLElementType("PROCESS_SENSITIVITY_LIST");
  IElementType PROCESS_STATEMENT = new VHDLElementType("PROCESS_STATEMENT");
  IElementType PROCESS_STATEMENT_PART = new VHDLElementType("PROCESS_STATEMENT_PART");
  IElementType PROTECTED_TYPE_BODY = new VHDLElementType("PROTECTED_TYPE_BODY");
  IElementType PROTECTED_TYPE_BODY_DECLARATIVE_ITEM = new VHDLElementType("PROTECTED_TYPE_BODY_DECLARATIVE_ITEM");
  IElementType PROTECTED_TYPE_DECLARATION = new VHDLElementType("PROTECTED_TYPE_DECLARATION");
  IElementType PROTECTED_TYPE_DECLARATIVE_ITEM = new VHDLElementType("PROTECTED_TYPE_DECLARATIVE_ITEM");
  IElementType PROTECTED_TYPE_DEFINITION = new VHDLElementType("PROTECTED_TYPE_DEFINITION");
  IElementType PROTECTED_TYPE_HEADER = new VHDLElementType("PROTECTED_TYPE_HEADER");
  IElementType PROTECTED_TYPE_INSTANTIATION_DEFINITION = new VHDLElementType("PROTECTED_TYPE_INSTANTIATION_DEFINITION");
  IElementType QUALIFIED_XPRESSION = new VHDLElementType("QUALIFIED_XPRESSION");
  IElementType RANGE = new VHDLElementType("RANGE");
  IElementType RANGE_CONSTRAINT = new VHDLElementType("RANGE_CONSTRAINT");
  IElementType RECORD_CONSTRAINT = new VHDLElementType("RECORD_CONSTRAINT");
  IElementType RECORD_ELEMENT_CONSTRAINT = new VHDLElementType("RECORD_ELEMENT_CONSTRAINT");
  IElementType RECORD_ELEMENT_LIST = new VHDLElementType("RECORD_ELEMENT_LIST");
  IElementType RECORD_ELEMENT_RESOLUTION = new VHDLElementType("RECORD_ELEMENT_RESOLUTION");
  IElementType RECORD_MODE_VIEW_INDICATION = new VHDLElementType("RECORD_MODE_VIEW_INDICATION");
  IElementType RECORD_RESOLUTION = new VHDLElementType("RECORD_RESOLUTION");
  IElementType RECORD_TYPE_DEFINITION = new VHDLElementType("RECORD_TYPE_DEFINITION");
  IElementType RELATION = new VHDLElementType("RELATION");
  IElementType RELATIONAL_OPERATOR = new VHDLElementType("RELATIONAL_OPERATOR");
  IElementType RELATIVE_PATHNAME = new VHDLElementType("RELATIVE_PATHNAME");
  IElementType REPORT_STATEMENT = new VHDLElementType("REPORT_STATEMENT");
  IElementType RESOLUTION_INDICATION = new VHDLElementType("RESOLUTION_INDICATION");
  IElementType RETURN_STATEMENT = new VHDLElementType("RETURN_STATEMENT");
  IElementType SCALAR_INCOMPLETE_TYPE_DEFINITION = new VHDLElementType("SCALAR_INCOMPLETE_TYPE_DEFINITION");
  IElementType SCALAR_TYPE_DEFINITION = new VHDLElementType("SCALAR_TYPE_DEFINITION");
  IElementType SECONDARY_UNIT = new VHDLElementType("SECONDARY_UNIT");
  IElementType SECONDARY_UNIT_DECLARATION = new VHDLElementType("SECONDARY_UNIT_DECLARATION");
  IElementType SELECTED_EXPRESSIONS = new VHDLElementType("SELECTED_EXPRESSIONS");
  IElementType SELECTED_FORCE_ASSIGNMENT = new VHDLElementType("SELECTED_FORCE_ASSIGNMENT");
  IElementType SELECTED_NAME = new VHDLElementType("SELECTED_NAME");
  IElementType SELECTED_SIGNAL_ASSIGNMENT = new VHDLElementType("SELECTED_SIGNAL_ASSIGNMENT");
  IElementType SELECTED_VARIABLE_ASSIGNMENT = new VHDLElementType("SELECTED_VARIABLE_ASSIGNMENT");
  IElementType SELECTED_WAVEFORMS = new VHDLElementType("SELECTED_WAVEFORMS");
  IElementType SELECTED_WAVEFORM_ASSIGNMENT = new VHDLElementType("SELECTED_WAVEFORM_ASSIGNMENT");
  IElementType SENSITIVITY_CLAUSE = new VHDLElementType("SENSITIVITY_CLAUSE");
  IElementType SENSITIVITY_LIST = new VHDLElementType("SENSITIVITY_LIST");
  IElementType SEQUENCE_OF_STATEMENTS = new VHDLElementType("SEQUENCE_OF_STATEMENTS");
  IElementType SEQUENTIAL_BLOCK_DECLARATIVE_PART = new VHDLElementType("SEQUENTIAL_BLOCK_DECLARATIVE_PART");
  IElementType SEQUENTIAL_BLOCK_STATEMENT = new VHDLElementType("SEQUENTIAL_BLOCK_STATEMENT");
  IElementType SEQUENTIAL_BLOCK_STATEMENT_PART = new VHDLElementType("SEQUENTIAL_BLOCK_STATEMENT_PART");
  IElementType SEQUENTIAL_STATEMENT = new VHDLElementType("SEQUENTIAL_STATEMENT");
  IElementType SEQUENTIAL_STATEMENT_BODY = new VHDLElementType("SEQUENTIAL_STATEMENT_BODY");
  IElementType SEQUENTIAL_STATEMENT_DECLARATIVE_PART = new VHDLElementType("SEQUENTIAL_STATEMENT_DECLARATIVE_PART");
  IElementType SHARED_VARIABLE_DECLARATION = new VHDLElementType("SHARED_VARIABLE_DECLARATION");
  IElementType SHIFT_EXPRESSION = new VHDLElementType("SHIFT_EXPRESSION");
  IElementType SHIFT_OPERATOR = new VHDLElementType("SHIFT_OPERATOR");
  IElementType SIGN = new VHDLElementType("SIGN");
  IElementType SIGNAL_ASSIGNMENT_STATEMENT = new VHDLElementType("SIGNAL_ASSIGNMENT_STATEMENT");
  IElementType SIGNAL_DECLARATION = new VHDLElementType("SIGNAL_DECLARATION");
  IElementType SIGNAL_KIND = new VHDLElementType("SIGNAL_KIND");
  IElementType SIGNAL_LIST = new VHDLElementType("SIGNAL_LIST");
  IElementType SIGNATURE = new VHDLElementType("SIGNATURE");
  IElementType SIMPLE_CONFIGURATION_SPECIFICATION = new VHDLElementType("SIMPLE_CONFIGURATION_SPECIFICATION");
  IElementType SIMPLE_EXPRESSION = new VHDLElementType("SIMPLE_EXPRESSION");
  IElementType SIMPLE_FORCE_ASSIGNMENT = new VHDLElementType("SIMPLE_FORCE_ASSIGNMENT");
  IElementType SIMPLE_MODE_INDICATION = new VHDLElementType("SIMPLE_MODE_INDICATION");
  IElementType SIMPLE_NAME = new VHDLElementType("SIMPLE_NAME");
  IElementType SIMPLE_RANGE = new VHDLElementType("SIMPLE_RANGE");
  IElementType SIMPLE_RELEASE_ASSIGNMENT = new VHDLElementType("SIMPLE_RELEASE_ASSIGNMENT");
  IElementType SIMPLE_SIGNAL_ASSIGNMENT = new VHDLElementType("SIMPLE_SIGNAL_ASSIGNMENT");
  IElementType SIMPLE_VARIABLE_ASSIGNMENT = new VHDLElementType("SIMPLE_VARIABLE_ASSIGNMENT");
  IElementType SIMPLE_WAVEFORM_ASSIGNMENT = new VHDLElementType("SIMPLE_WAVEFORM_ASSIGNMENT");
  IElementType SINGLE_LINE_COMMENT = new VHDLElementType("SINGLE_LINE_COMMENT");
  IElementType SLICE_NAME = new VHDLElementType("SLICE_NAME");
  IElementType STRING_LITERAL = new VHDLElementType("STRING_LITERAL");
  IElementType SUBPROGRAM_BODY = new VHDLElementType("SUBPROGRAM_BODY");
  IElementType SUBPROGRAM_DECLARATION = new VHDLElementType("SUBPROGRAM_DECLARATION");
  IElementType SUBPROGRAM_DECLARATIVE_ITEM = new VHDLElementType("SUBPROGRAM_DECLARATIVE_ITEM");
  IElementType SUBPROGRAM_HEADER = new VHDLElementType("SUBPROGRAM_HEADER");
  IElementType SUBPROGRAM_INSTANTIATION_DECLARATION = new VHDLElementType("SUBPROGRAM_INSTANTIATION_DECLARATION");
  IElementType SUBPROGRAM_KIND = new VHDLElementType("SUBPROGRAM_KIND");
  IElementType SUBPROGRAM_SPECIFICATION = new VHDLElementType("SUBPROGRAM_SPECIFICATION");
  IElementType SUBTYPE_DECLARATION = new VHDLElementType("SUBTYPE_DECLARATION");
  IElementType SUBTYPE_INDICATION = new VHDLElementType("SUBTYPE_INDICATION");
  IElementType SUFFIX = new VHDLElementType("SUFFIX");
  IElementType TARGET = new VHDLElementType("TARGET");
  IElementType TERM = new VHDLElementType("TERM");
  IElementType TIMEOUT_CLAUSE = new VHDLElementType("TIMEOUT_CLAUSE");
  IElementType TYPE_CONVERSION = new VHDLElementType("TYPE_CONVERSION");
  IElementType TYPE_DECLARATION = new VHDLElementType("TYPE_DECLARATION");
  IElementType TYPE_DEFINITION = new VHDLElementType("TYPE_DEFINITION");
  IElementType TYPE_MARK = new VHDLElementType("TYPE_MARK");
  IElementType UNARY_EXPRESSION = new VHDLElementType("UNARY_EXPRESSION");
  IElementType UNARY_MISCELLANEOUS_OPERATOR = new VHDLElementType("UNARY_MISCELLANEOUS_OPERATOR");
  IElementType UNBOUNDED_ARRAY_DEFINITION = new VHDLElementType("UNBOUNDED_ARRAY_DEFINITION");
  IElementType UNSPECIFIED_TYPE_INDICATION = new VHDLElementType("UNSPECIFIED_TYPE_INDICATION");
  IElementType USE_CLAUSE = new VHDLElementType("USE_CLAUSE");
  IElementType VALUE_RETURN_STATEMENT = new VHDLElementType("VALUE_RETURN_STATEMENT");
  IElementType VARIABLE_ASSIGNMENT_STATEMENT = new VHDLElementType("VARIABLE_ASSIGNMENT_STATEMENT");
  IElementType VARIABLE_DECLARATION = new VHDLElementType("VARIABLE_DECLARATION");
  IElementType VERIFICATION_UNIT_BINDING_INDICATION = new VHDLElementType("VERIFICATION_UNIT_BINDING_INDICATION");
  IElementType VERIFICATION_UNIT_LIST = new VHDLElementType("VERIFICATION_UNIT_LIST");
  IElementType WAIT_STATEMENT = new VHDLElementType("WAIT_STATEMENT");
  IElementType WAVEFORM = new VHDLElementType("WAVEFORM");
  IElementType WAVEFORM_ELEMENT = new VHDLElementType("WAVEFORM_ELEMENT");

  IElementType ABS = new VHDLTokenType("ABS");
  IElementType ACCESS = new VHDLTokenType("ACCESS");
  IElementType AFTER = new VHDLTokenType("AFTER");
  IElementType AGREGATE = new VHDLTokenType("agregate");
  IElementType ALIAS = new VHDLTokenType("ALIAS");
  IElementType ALL = new VHDLTokenType("all");
  IElementType AND = new VHDLTokenType("AND");
  IElementType ARCHITECTURE = new VHDLTokenType("ARCHITECTURE");
  IElementType ARRAY = new VHDLTokenType("ARRAY");
  IElementType ASSERT = new VHDLTokenType("ASSERT");
  IElementType ATTRIBUTE = new VHDLTokenType("ATTRIBUTE");
  IElementType BEGIN = new VHDLTokenType("BEGIN");
  IElementType BLOCK = new VHDLTokenType("BLOCK");
  IElementType BODY = new VHDLTokenType("BODY");
  IElementType BUFFER = new VHDLTokenType("BUFFER");
  IElementType BUS = new VHDLTokenType("BUS");
  IElementType CASE = new VHDLTokenType("CASE");
  IElementType CHARACTER_LITERAL_TOKEN = new VHDLTokenType("CHARACTER_LITERAL_TOKEN");
  IElementType COMMENT = new VHDLTokenType("COMMENT");
  IElementType COMPONENT = new VHDLTokenType("COMPONENT");
  IElementType CONFIGURATION = new VHDLTokenType("CONFIGURATION");
  IElementType CONSTANT = new VHDLTokenType("CONSTANT");
  IElementType CONTEXT = new VHDLTokenType("CONTEXT");
  IElementType DEFAULT = new VHDLTokenType("DEFAULT");
  IElementType DISCONNECT = new VHDLTokenType("DISCONNECT");
  IElementType DOWNTO = new VHDLTokenType("DOWNTO");
  IElementType ELSE = new VHDLTokenType("ELSE");
  IElementType ELSIF = new VHDLTokenType("ELSIF");
  IElementType END = new VHDLTokenType("END");
  IElementType ENTITY = new VHDLTokenType("ENTITY");
  IElementType EXIT = new VHDLTokenType("EXIT");
  IElementType FILE = new VHDLTokenType("FILE");
  IElementType FOR = new VHDLTokenType("FOR");
  IElementType FORCE = new VHDLTokenType("FORCE");
  IElementType FUNCTION = new VHDLTokenType("FUNCTION");
  IElementType GENERATE = new VHDLTokenType("GENERATE");
  IElementType GENERIC = new VHDLTokenType("GENERIC");
  IElementType GROUP = new VHDLTokenType("GROUP");
  IElementType GUARDED = new VHDLTokenType("GUARDED");
  IElementType IDENTIFIER = new VHDLTokenType("identifier");
  IElementType IF = new VHDLTokenType("IF");
  IElementType IMPURE = new VHDLTokenType("IMPURE");
  IElementType IN = new VHDLTokenType("IN");
  IElementType INERTIAL = new VHDLTokenType("INERTIAL");
  IElementType INOUT = new VHDLTokenType("INOUT");
  IElementType INTEGER = new VHDLTokenType("INTEGER");
  IElementType IS = new VHDLTokenType("IS");
  IElementType LABEL_TOKEN = new VHDLTokenType("LABEL_TOKEN");
  IElementType LIBRARY = new VHDLTokenType("LIBRARY");
  IElementType LINKAGE = new VHDLTokenType("LINKAGE");
  IElementType LITERAL_TOKEN = new VHDLTokenType("LITERAL_TOKEN");
  IElementType LOOP = new VHDLTokenType("LOOP");
  IElementType MAP = new VHDLTokenType("MAP");
  IElementType MOD = new VHDLTokenType("MOD");
  IElementType NAND = new VHDLTokenType("NAND");
  IElementType NEW = new VHDLTokenType("NEW");
  IElementType NEXT = new VHDLTokenType("NEXT");
  IElementType NOR = new VHDLTokenType("NOR");
  IElementType NOT = new VHDLTokenType("NOT");
  IElementType NULL = new VHDLTokenType("NULL");
  IElementType OF = new VHDLTokenType("OF");
  IElementType ON = new VHDLTokenType("ON");
  IElementType OPEN = new VHDLTokenType("OPEN");
  IElementType OR = new VHDLTokenType("OR");
  IElementType OTHERS = new VHDLTokenType("OTHERS");
  IElementType OUT = new VHDLTokenType("OUT");
  IElementType PACKAGE = new VHDLTokenType("PACKAGE");
  IElementType PARAMETER = new VHDLTokenType("PARAMETER");
  IElementType PORT = new VHDLTokenType("PORT");
  IElementType POSTPONED = new VHDLTokenType("POSTPONED");
  IElementType PRIVATE = new VHDLTokenType("PRIVATE");
  IElementType PRIVATE_TOKEN = new VHDLTokenType("PRIVATE_TOKEN");
  IElementType PROCEDURE = new VHDLTokenType("PROCEDURE");
  IElementType PROCESS = new VHDLTokenType("PROCESS");
  IElementType PROPERTY = new VHDLTokenType("PROPERTY");
  IElementType PROTECTED = new VHDLTokenType("PROTECTED");
  IElementType PURE = new VHDLTokenType("PURE");
  IElementType RANGE_TOKEN = new VHDLTokenType("RANGE_TOKEN");
  IElementType RECORD = new VHDLTokenType("RECORD");
  IElementType REGISTER = new VHDLTokenType("REGISTER");
  IElementType REJECT = new VHDLTokenType("REJECT");
  IElementType RELEASE = new VHDLTokenType("RELEASE");
  IElementType REM = new VHDLTokenType("REM");
  IElementType REPORT = new VHDLTokenType("REPORT");
  IElementType RETURN = new VHDLTokenType("RETURN");
  IElementType ROL = new VHDLTokenType("ROL");
  IElementType ROR = new VHDLTokenType("ROR");
  IElementType SELECT = new VHDLTokenType("SELECT");
  IElementType SEMICOLON = new VHDLTokenType("SEMICOLON");
  IElementType SEQUENCE = new VHDLTokenType("SEQUENCE");
  IElementType SEVERITY = new VHDLTokenType("SEVERITY");
  IElementType SHARED = new VHDLTokenType("SHARED");
  IElementType SIGNAL = new VHDLTokenType("SIGNAL");
  IElementType SINGLE_QUOTE = new VHDLTokenType("SINGLE_QUOTE");
  IElementType SLA = new VHDLTokenType("SLA");
  IElementType SLL = new VHDLTokenType("SLL");
  IElementType SRA = new VHDLTokenType("SRA");
  IElementType SRL = new VHDLTokenType("SRL");
  IElementType STRING_LITERAL_TOKEN = new VHDLTokenType("STRING_LITERAL_TOKEN");
  IElementType SUBTYPE = new VHDLTokenType("SUBTYPE");
  IElementType THEN = new VHDLTokenType("THEN");
  IElementType TO = new VHDLTokenType("TO");
  IElementType TRANSPORT = new VHDLTokenType("TRANSPORT");
  IElementType TYPE = new VHDLTokenType("TYPE");
  IElementType UNAFFECTED = new VHDLTokenType("UNAFFECTED");
  IElementType UNITS = new VHDLTokenType("UNITS");
  IElementType UNTIL = new VHDLTokenType("UNTIL");
  IElementType USE = new VHDLTokenType("USE");
  IElementType VARIABLE = new VHDLTokenType("VARIABLE");
  IElementType VIEW = new VHDLTokenType("VIEW");
  IElementType VUNIT = new VHDLTokenType("VUNIT");
  IElementType WAIT = new VHDLTokenType("WAIT");
  IElementType WHEN = new VHDLTokenType("WHEN");
  IElementType WHILE = new VHDLTokenType("WHILE");
  IElementType WITH = new VHDLTokenType("WITH");
  IElementType XNOR = new VHDLTokenType("XNOR");
  IElementType XOR = new VHDLTokenType("XOR");

  class Factory {
    public static PsiElement createElement(ASTNode node) {
      IElementType type = node.getElementType();
      if (type == ABSOLUTE_PATHNAME) {
        return new VHDLAbsolutePathnameImpl(node);
      }
      else if (type == ABSTRACT_LITERAL) {
        return new VHDLAbstractLiteralImpl(node);
      }
      else if (type == ACCESS_INCOMPLETE_TYPE_DEFINITION) {
        return new VHDLAccessIncompleteTypeDefinitionImpl(node);
      }
      else if (type == ACCESS_TYPE_DEFINITION) {
        return new VHDLAccessTypeDefinitionImpl(node);
      }
      else if (type == ACTUAL_DESIGNATOR) {
        return new VHDLActualDesignatorImpl(node);
      }
      else if (type == ACTUAL_PART) {
        return new VHDLActualPartImpl(node);
      }
      else if (type == ADDING_OPERATOR) {
        return new VHDLAddingOperatorImpl(node);
      }
      else if (type == AGGREGATE) {
        return new VHDLAggregateImpl(node);
      }
      else if (type == ALIAS_DECLARATION) {
        return new VHDLAliasDeclarationImpl(node);
      }
      else if (type == ALIAS_DESIGNATOR) {
        return new VHDLAliasDesignatorImpl(node);
      }
      else if (type == ALLOCATOR) {
        return new VHDLAllocatorImpl(node);
      }
      else if (type == ARCHITECTURE_BODY) {
        return new VHDLArchitectureBodyImpl(node);
      }
      else if (type == ARRAY_CONSTRAINT) {
        return new VHDLArrayConstraintImpl(node);
      }
      else if (type == ARRAY_ELEMENT_CONSTRAINT) {
        return new VHDLArrayElementConstraintImpl(node);
      }
      else if (type == ARRAY_ELEMENT_RESOLUTION) {
        return new VHDLArrayElementResolutionImpl(node);
      }
      else if (type == ARRAY_INCOMPLETE_TYPE_DEFINITION) {
        return new VHDLArrayIncompleteTypeDefinitionImpl(node);
      }
      else if (type == ARRAY_INDEX_INCOMPLETE_TYPE) {
        return new VHDLArrayIndexIncompleteTypeImpl(node);
      }
      else if (type == ARRAY_INDEX_INCOMPLETE_TYPE_LIST) {
        return new VHDLArrayIndexIncompleteTypeListImpl(node);
      }
      else if (type == ARRAY_MODE_VIEW_INDICATION) {
        return new VHDLArrayModeViewIndicationImpl(node);
      }
      else if (type == ARRAY_TYPE_DEFINITION) {
        return new VHDLArrayTypeDefinitionImpl(node);
      }
      else if (type == ASSERTION) {
        return new VHDLAssertionImpl(node);
      }
      else if (type == ASSERTION_STATEMENT) {
        return new VHDLAssertionStatementImpl(node);
      }
      else if (type == ASSOCIATION_ELEMENT) {
        return new VHDLAssociationElementImpl(node);
      }
      else if (type == ASSOCIATION_LIST) {
        return new VHDLAssociationListImpl(node);
      }
      else if (type == ATTRIBUTE_DECLARATION) {
        return new VHDLAttributeDeclarationImpl(node);
      }
      else if (type == ATTRIBUTE_DESIGNATOR) {
        return new VHDLAttributeDesignatorImpl(node);
      }
      else if (type == ATTRIBUTE_NAME) {
        return new VHDLAttributeNameImpl(node);
      }
      else if (type == ATTRIBUTE_SPECIFICATION) {
        return new VHDLAttributeSpecificationImpl(node);
      }
      else if (type == BINARY_MISCELLANEOUS_OPERATOR) {
        return new VHDLBinaryMiscellaneousOperatorImpl(node);
      }
      else if (type == BINDING_INDICATION) {
        return new VHDLBindingIndicationImpl(node);
      }
      else if (type == BIT_STRING_LITERAL) {
        return new VHDLBitStringLiteralImpl(node);
      }
      else if (type == BLOCK_CONFIGURATION) {
        return new VHDLBlockConfigurationImpl(node);
      }
      else if (type == BLOCK_DECLARATIVE_ITEM) {
        return new VHDLBlockDeclarativeItemImpl(node);
      }
      else if (type == BLOCK_DECLARATIVE_PART) {
        return new VHDLBlockDeclarativePartImpl(node);
      }
      else if (type == BLOCK_HEADER) {
        return new VHDLBlockHeaderImpl(node);
      }
      else if (type == BLOCK_SPECIFICATION) {
        return new VHDLBlockSpecificationImpl(node);
      }
      else if (type == BLOCK_STATEMENT) {
        return new VHDLBlockStatementImpl(node);
      }
      else if (type == BLOCK_STATEMENT_PART) {
        return new VHDLBlockStatementPartImpl(node);
      }
      else if (type == CASE_GENERATE_ALTERNATIVE) {
        return new VHDLCaseGenerateAlternativeImpl(node);
      }
      else if (type == CASE_GENERATE_STATEMENT) {
        return new VHDLCaseGenerateStatementImpl(node);
      }
      else if (type == CASE_STATEMENT) {
        return new VHDLCaseStatementImpl(node);
      }
      else if (type == CASE_STATEMENT_ALTERNATIVE) {
        return new VHDLCaseStatementAlternativeImpl(node);
      }
      else if (type == CHARACTER_LITERAL) {
        return new VHDLCharacterLiteralImpl(node);
      }
      else if (type == CHOICE) {
        return new VHDLChoiceImpl(node);
      }
      else if (type == CHOICES) {
        return new VHDLChoicesImpl(node);
      }
      else if (type == COMPONENT_CONFIGURATION) {
        return new VHDLComponentConfigurationImpl(node);
      }
      else if (type == COMPONENT_DECLARATION) {
        return new VHDLComponentDeclarationImpl(node);
      }
      else if (type == COMPONENT_INSTANTIATION_STATEMENT) {
        return new VHDLComponentInstantiationStatementImpl(node);
      }
      else if (type == COMPONENT_SPECIFICATION) {
        return new VHDLComponentSpecificationImpl(node);
      }
      else if (type == COMPOSITE_TYPE_DEFINITION) {
        return new VHDLCompositeTypeDefinitionImpl(node);
      }
      else if (type == COMPOUND_CONFIGURATION_SPECIFICATION) {
        return new VHDLCompoundConfigurationSpecificationImpl(node);
      }
      else if (type == CONCURRENT_ASSERTION_STATEMENT) {
        return new VHDLConcurrentAssertionStatementImpl(node);
      }
      else if (type == CONCURRENT_CONDITIONAL_SIGNAL_ASSIGNMENT) {
        return new VHDLConcurrentConditionalSignalAssignmentImpl(node);
      }
      else if (type == CONCURRENT_PROCEDURE_CALL_STATEMENT) {
        return new VHDLConcurrentProcedureCallStatementImpl(node);
      }
      else if (type == CONCURRENT_SELECTED_SIGNAL_ASSIGNMENT) {
        return new VHDLConcurrentSelectedSignalAssignmentImpl(node);
      }
      else if (type == CONCURRENT_SIGNAL_ASSIGNMENT_STATEMENT) {
        return new VHDLConcurrentSignalAssignmentStatementImpl(node);
      }
      else if (type == CONCURRENT_SIMPLE_SIGNAL_ASSIGNMENT) {
        return new VHDLConcurrentSimpleSignalAssignmentImpl(node);
      }
      else if (type == CONCURRENT_STATEMENT) {
        return new VHDLConcurrentStatementImpl(node);
      }
      else if (type == CONDITION) {
        return new VHDLConditionImpl(node);
      }
      else if (type == CONDITIONAL_EXPRESSION) {
        return new VHDLConditionalExpressionImpl(node);
      }
      else if (type == CONDITIONAL_OR_UNAFFECTED_EXPRESSION) {
        return new VHDLConditionalOrUnaffectedExpressionImpl(node);
      }
      else if (type == CONDITIONAL_SIGNAL_ASSIGNMENT) {
        return new VHDLConditionalSignalAssignmentImpl(node);
      }
      else if (type == CONDITIONAL_WAVEFORMS) {
        return new VHDLConditionalWaveformsImpl(node);
      }
      else if (type == CONDITION_CLAUSE) {
        return new VHDLConditionClauseImpl(node);
      }
      else if (type == CONDITION_OPERATOR) {
        return new VHDLConditionOperatorImpl(node);
      }
      else if (type == CONFIGURATION_DECLARATION) {
        return new VHDLConfigurationDeclarationImpl(node);
      }
      else if (type == CONFIGURATION_DECLARATIVE_ITEM) {
        return new VHDLConfigurationDeclarativeItemImpl(node);
      }
      else if (type == CONFIGURATION_ITEM) {
        return new VHDLConfigurationItemImpl(node);
      }
      else if (type == CONFIGURATION_SPECIFICATION) {
        return new VHDLConfigurationSpecificationImpl(node);
      }
      else if (type == CONSTANT_DECLARATION) {
        return new VHDLConstantDeclarationImpl(node);
      }
      else if (type == CONSTRAINED_ARRAY_DEFINITION) {
        return new VHDLConstrainedArrayDefinitionImpl(node);
      }
      else if (type == CONSTRAINT) {
        return new VHDLConstraintImpl(node);
      }
      else if (type == CONTEXT_CLAUSE) {
        return new VHDLContextClauseImpl(node);
      }
      else if (type == CONTEXT_DECLARATION) {
        return new VHDLContextDeclarationImpl(node);
      }
      else if (type == CONTEXT_ITEM) {
        return new VHDLContextItemImpl(node);
      }
      else if (type == CONTEXT_REFERENCE) {
        return new VHDLContextReferenceImpl(node);
      }
      else if (type == DECIMAL_LITERAL) {
        return new VHDLDecimalLiteralImpl(node);
      }
      else if (type == DELAY_MECHANISM) {
        return new VHDLDelayMechanismImpl(node);
      }
      else if (type == DESIGNATOR) {
        return new VHDLDesignatorImpl(node);
      }
      else if (type == DESIGN_UNIT) {
        return new VHDLDesignUnitImpl(node);
      }
      else if (type == DIRECTION) {
        return new VHDLDirectionImpl(node);
      }
      else if (type == DISCONNECTION_SPECIFICATION) {
        return new VHDLDisconnectionSpecificationImpl(node);
      }
      else if (type == DISCRETE_INCOMPLETE_TYPE_DEFINITION) {
        return new VHDLDiscreteIncompleteTypeDefinitionImpl(node);
      }
      else if (type == DISCRETE_RANGE) {
        return new VHDLDiscreteRangeImpl(node);
      }
      else if (type == ELEMENT_ARRAY_MODE_VIEW_INDICATION) {
        return new VHDLElementArrayModeViewIndicationImpl(node);
      }
      else if (type == ELEMENT_ASSOCIATION) {
        return new VHDLElementAssociationImpl(node);
      }
      else if (type == ELEMENT_CONSTRAINT) {
        return new VHDLElementConstraintImpl(node);
      }
      else if (type == ELEMENT_DECLARATION) {
        return new VHDLElementDeclarationImpl(node);
      }
      else if (type == ELEMENT_MODE_INDICATION) {
        return new VHDLElementModeIndicationImpl(node);
      }
      else if (type == ELEMENT_MODE_VIEW_INDICATION) {
        return new VHDLElementModeViewIndicationImpl(node);
      }
      else if (type == ELEMENT_RECORD_MODE_VIEW_INDICATION) {
        return new VHDLElementRecordModeViewIndicationImpl(node);
      }
      else if (type == ELEMENT_RESOLUTION) {
        return new VHDLElementResolutionImpl(node);
      }
      else if (type == ELEMENT_SUBTYPE_DEFINITION) {
        return new VHDLElementSubtypeDefinitionImpl(node);
      }
      else if (type == ENTITY_ASPECT) {
        return new VHDLEntityAspectImpl(node);
      }
      else if (type == ENTITY_CLASS) {
        return new VHDLEntityClassImpl(node);
      }
      else if (type == ENTITY_CLASS_ENTRY) {
        return new VHDLEntityClassEntryImpl(node);
      }
      else if (type == ENTITY_CLASS_ENTRY_LIST) {
        return new VHDLEntityClassEntryListImpl(node);
      }
      else if (type == ENTITY_DECLARATION) {
        return new VHDLEntityDeclarationImpl(node);
      }
      else if (type == ENTITY_DECLARATIVE_ITEM) {
        return new VHDLEntityDeclarativeItemImpl(node);
      }
      else if (type == ENTITY_DESIGNATOR) {
        return new VHDLEntityDesignatorImpl(node);
      }
      else if (type == ENTITY_HEADER) {
        return new VHDLEntityHeaderImpl(node);
      }
      else if (type == ENTITY_NAME_LIST) {
        return new VHDLEntityNameListImpl(node);
      }
      else if (type == ENTITY_SPECIFICATION) {
        return new VHDLEntitySpecificationImpl(node);
      }
      else if (type == ENTITY_STATEMENT) {
        return new VHDLEntityStatementImpl(node);
      }
      else if (type == ENTITY_TAG) {
        return new VHDLEntityTagImpl(node);
      }
      else if (type == ENUMERATION_LITERAL) {
        return new VHDLEnumerationLiteralImpl(node);
      }
      else if (type == ENUMERATION_TYPE_DEFINITION) {
        return new VHDLEnumerationTypeDefinitionImpl(node);
      }
      else if (type == EXIT_STATEMENT) {
        return new VHDLExitStatementImpl(node);
      }
      else if (type == EXPONENT) {
        return new VHDLExponentImpl(node);
      }
      else if (type == EXPRESSION) {
        return new VHDLExpressionImpl(node);
      }
      else if (type == EXPRESSION_OR_UNAFFECTED) {
        return new VHDLExpressionOrUnaffectedImpl(node);
      }
      else if (type == EXTERNAL_CONSTANT_NAME) {
        return new VHDLExternalConstantNameImpl(node);
      }
      else if (type == EXTERNAL_NAME) {
        return new VHDLExternalNameImpl(node);
      }
      else if (type == EXTERNAL_PATHNAME) {
        return new VHDLExternalPathnameImpl(node);
      }
      else if (type == EXTERNAL_SIGNAL_NAME) {
        return new VHDLExternalSignalNameImpl(node);
      }
      else if (type == EXTERNAL_VARIABLE_NAME) {
        return new VHDLExternalVariableNameImpl(node);
      }
      else if (type == FACTOR) {
        return new VHDLFactorImpl(node);
      }
      else if (type == FILE_DECLARATION) {
        return new VHDLFileDeclarationImpl(node);
      }
      else if (type == FILE_INCOMPLETE_TYPE_DEFINITION) {
        return new VHDLFileIncompleteTypeDefinitionImpl(node);
      }
      else if (type == FILE_LOGICAL_NAME) {
        return new VHDLFileLogicalNameImpl(node);
      }
      else if (type == FILE_OPEN_INFORMATION) {
        return new VHDLFileOpenInformationImpl(node);
      }
      else if (type == FILE_TYPE_DEFINITION) {
        return new VHDLFileTypeDefinitionImpl(node);
      }
      else if (type == FLOATING_INCOMPLETE_TYPE_DEFINITION) {
        return new VHDLFloatingIncompleteTypeDefinitionImpl(node);
      }
      else if (type == FLOATING_TYPE_DEFINITION) {
        return new VHDLFloatingTypeDefinitionImpl(node);
      }
      else if (type == FORCE_MODE) {
        return new VHDLForceModeImpl(node);
      }
      else if (type == FORMAL_DESIGNATOR) {
        return new VHDLFormalDesignatorImpl(node);
      }
      else if (type == FORMAL_PARAMETER_LIST) {
        return new VHDLFormalParameterListImpl(node);
      }
      else if (type == FORMAL_PART) {
        return new VHDLFormalPartImpl(node);
      }
      else if (type == FOR_GENERATE_STATEMENT) {
        return new VHDLForGenerateStatementImpl(node);
      }
      else if (type == FULL_TYPE_DECLARATION) {
        return new VHDLFullTypeDeclarationImpl(node);
      }
      else if (type == FUNCTION_CALL) {
        return new VHDLFunctionCallImpl(node);
      }
      else if (type == FUNCTION_SPECIFICATION) {
        return new VHDLFunctionSpecificationImpl(node);
      }
      else if (type == GENERATE_SPECIFICATION) {
        return new VHDLGenerateSpecificationImpl(node);
      }
      else if (type == GENERATE_STATEMENT) {
        return new VHDLGenerateStatementImpl(node);
      }
      else if (type == GENERATE_STATEMENT_BODY) {
        return new VHDLGenerateStatementBodyImpl(node);
      }
      else if (type == GENERATE_STATEMENT_LABEL_SPECIFICATION) {
        return new VHDLGenerateStatementLabelSpecificationImpl(node);
      }
      else if (type == GENERIC_CLAUSE) {
        return new VHDLGenericClauseImpl(node);
      }
      else if (type == GENERIC_LIST) {
        return new VHDLGenericListImpl(node);
      }
      else if (type == GENERIC_MAP_ASPECT) {
        return new VHDLGenericMapAspectImpl(node);
      }
      else if (type == GROUP_CONSTITUENT) {
        return new VHDLGroupConstituentImpl(node);
      }
      else if (type == GROUP_CONSTITUENT_LIST) {
        return new VHDLGroupConstituentListImpl(node);
      }
      else if (type == GROUP_DECLARATION) {
        return new VHDLGroupDeclarationImpl(node);
      }
      else if (type == GROUP_TEMPLATE_DECLARATION) {
        return new VHDLGroupTemplateDeclarationImpl(node);
      }
      else if (type == GUARDED_SIGNAL_SPECIFICATION) {
        return new VHDLGuardedSignalSpecificationImpl(node);
      }
      else if (type == IDENTIFIER_LIST) {
        return new VHDLIdentifierListImpl(node);
      }
      else if (type == IF_GENERATE_STATEMENT) {
        return new VHDLIfGenerateStatementImpl(node);
      }
      else if (type == IF_STATEMENT) {
        return new VHDLIfStatementImpl(node);
      }
      else if (type == III_FILE_OPEN_KIND_EXPRESSION) {
        return new VHDLIiiFileOpenKindExpressionImpl(node);
      }
      else if (type == II_BLOCK_STATEMENT_LABEL) {
        return new VHDLIiBlockStatementLabelImpl(node);
      }
      else if (type == II_COMPONENT_INSTANTIATION_LABEL) {
        return new VHDLIiComponentInstantiationLabelImpl(node);
      }
      else if (type == II_GENERATE_STATEMENT_LABEL) {
        return new VHDLIiGenerateStatementLabelImpl(node);
      }
      else if (type == II_GROUP_TEMPLATE_NAME) {
        return new VHDLIiGroupTemplateNameImpl(node);
      }
      else if (type == II_INSTANTIATED_PACKAGE_NAME) {
        return new VHDLIiInstantiatedPackageNameImpl(node);
      }
      else if (type == II_MODE_VIEW_NAME) {
        return new VHDLIiModeViewNameImpl(node);
      }
      else if (type == II_MODE_VIEW_SIMPLE_NAME) {
        return new VHDLIiModeViewSimpleNameImpl(node);
      }
      else if (type == II_PHYSICAL_TYPE_SIMPLE_NAME) {
        return new VHDLIiPhysicalTypeSimpleNameImpl(node);
      }
      else if (type == II_PROTECTED_TYPE_SIMPLE_NAME) {
        return new VHDLIiProtectedTypeSimpleNameImpl(node);
      }
      else if (type == II_RECORD_ELEMENT_SIMPLE_NAME) {
        return new VHDLIiRecordElementSimpleNameImpl(node);
      }
      else if (type == II_RECORD_TYPE_SIMPLE_NAME) {
        return new VHDLIiRecordTypeSimpleNameImpl(node);
      }
      else if (type == II_RESOLUTION_FUNCTION_NAME) {
        return new VHDLIiResolutionFunctionNameImpl(node);
      }
      else if (type == II_SEQUENTIAL_BLOCK_LABEL) {
        return new VHDLIiSequentialBlockLabelImpl(node);
      }
      else if (type == II_UNINSTANTIATED_PACKAGE_NAME) {
        return new VHDLIiUninstantiatedPackageNameImpl(node);
      }
      else if (type == II_UNINSTANTIATED_SUBPROGRAM_NAME) {
        return new VHDLIiUninstantiatedSubprogramNameImpl(node);
      }
      else if (type == II_VERIFICATION_UNIT_NAME) {
        return new VHDLIiVerificationUnitNameImpl(node);
      }
      else if (type == INCOMPLETE_SUBTYPE_INDICATION) {
        return new VHDLIncompleteSubtypeIndicationImpl(node);
      }
      else if (type == INCOMPLETE_TYPE_DECLARATION) {
        return new VHDLIncompleteTypeDeclarationImpl(node);
      }
      else if (type == INCOMPLETE_TYPE_DEFINITION) {
        return new VHDLIncompleteTypeDefinitionImpl(node);
      }
      else if (type == INCOMPLETE_TYPE_MARK) {
        return new VHDLIncompleteTypeMarkImpl(node);
      }
      else if (type == INDEXED_NAME) {
        return new VHDLIndexedNameImpl(node);
      }
      else if (type == INDEX_CONSTRAINT) {
        return new VHDLIndexConstraintImpl(node);
      }
      else if (type == INDEX_SUBTYPE_DEFINITION) {
        return new VHDLIndexSubtypeDefinitionImpl(node);
      }
      else if (type == INSTANTIATED_UNIT) {
        return new VHDLInstantiatedUnitImpl(node);
      }
      else if (type == INSTANTIATION_LIST) {
        return new VHDLInstantiationListImpl(node);
      }
      else if (type == INTEGER_INCOMPLETE_TYPE_DEFINITION) {
        return new VHDLIntegerIncompleteTypeDefinitionImpl(node);
      }
      else if (type == INTEGER_TYPE_DEFINITION) {
        return new VHDLIntegerTypeDefinitionImpl(node);
      }
      else if (type == INTERFACE_CONSTANT_DECLARATION) {
        return new VHDLInterfaceConstantDeclarationImpl(node);
      }
      else if (type == INTERFACE_DECLARATION) {
        return new VHDLInterfaceDeclarationImpl(node);
      }
      else if (type == INTERFACE_ELEMENT) {
        return new VHDLInterfaceElementImpl(node);
      }
      else if (type == INTERFACE_FILE_DECLARATION) {
        return new VHDLInterfaceFileDeclarationImpl(node);
      }
      else if (type == INTERFACE_FUNCTION_SPECIFICATION) {
        return new VHDLInterfaceFunctionSpecificationImpl(node);
      }
      else if (type == INTERFACE_LIST) {
        return new VHDLInterfaceListImpl(node);
      }
      else if (type == INTERFACE_OBJECT_DECLARATION) {
        return new VHDLInterfaceObjectDeclarationImpl(node);
      }
      else if (type == INTERFACE_PACKAGE_DECLARATION) {
        return new VHDLInterfacePackageDeclarationImpl(node);
      }
      else if (type == INTERFACE_PACKAGE_GENERIC_MAP_ASPECT) {
        return new VHDLInterfacePackageGenericMapAspectImpl(node);
      }
      else if (type == INTERFACE_PROCEDURE_SPECIFICATION) {
        return new VHDLInterfaceProcedureSpecificationImpl(node);
      }
      else if (type == INTERFACE_SIGNAL_DECLARATION) {
        return new VHDLInterfaceSignalDeclarationImpl(node);
      }
      else if (type == INTERFACE_SUBPROGRAM_DECLARATION) {
        return new VHDLInterfaceSubprogramDeclarationImpl(node);
      }
      else if (type == INTERFACE_SUBPROGRAM_DEFAULT) {
        return new VHDLInterfaceSubprogramDefaultImpl(node);
      }
      else if (type == INTERFACE_SUBPROGRAM_SPECIFICATION) {
        return new VHDLInterfaceSubprogramSpecificationImpl(node);
      }
      else if (type == INTERFACE_TYPE_DECLARATION) {
        return new VHDLInterfaceTypeDeclarationImpl(node);
      }
      else if (type == INTERFACE_TYPE_INDICATION) {
        return new VHDLInterfaceTypeIndicationImpl(node);
      }
      else if (type == INTERFACE_VARIABLE_DECLARATION) {
        return new VHDLInterfaceVariableDeclarationImpl(node);
      }
      else if (type == ITERATION_SCHEME) {
        return new VHDLIterationSchemeImpl(node);
      }
      else if (type == I_ACCESS_INCOMPLETE_SUBTYPE_INDICATION) {
        return new VHDLIAccessIncompleteSubtypeIndicationImpl(node);
      }
      else if (type == I_ALTERNATIVE_LABEL) {
        return new VHDLIAlternativeLabelImpl(node);
      }
      else if (type == I_ARCHITECTURE_IDENTIFIER) {
        return new VHDLIArchitectureIdentifierImpl(node);
      }
      else if (type == I_ARCHITECTURE_NAME) {
        return new VHDLIArchitectureNameImpl(node);
      }
      else if (type == I_ARCHITECTURE_SIMPLE_NAME) {
        return new VHDLIArchitectureSimpleNameImpl(node);
      }
      else if (type == I_ATTRIBUTE_SIMPLE_NAME) {
        return new VHDLIAttributeSimpleNameImpl(node);
      }
      else if (type == I_BLOCK_LABEL) {
        return new VHDLIBlockLabelImpl(node);
      }
      else if (type == I_CASE_LABEL) {
        return new VHDLICaseLabelImpl(node);
      }
      else if (type == I_COMPONENT_NAME) {
        return new VHDLIComponentNameImpl(node);
      }
      else if (type == I_COMPONENT_SIMPLE_NAME) {
        return new VHDLIComponentSimpleNameImpl(node);
      }
      else if (type == I_CONFIGURATION_NAME) {
        return new VHDLIConfigurationNameImpl(node);
      }
      else if (type == I_CONFIGURATION_SIMPLE_NAME) {
        return new VHDLIConfigurationSimpleNameImpl(node);
      }
      else if (type == I_CONTEXT_SIMPLE_NAME) {
        return new VHDLIContextSimpleNameImpl(node);
      }
      else if (type == I_DISCRETE_SUBTYPE_INDICATION) {
        return new VHDLIDiscreteSubtypeIndicationImpl(node);
      }
      else if (type == I_ELEMENT_INCOMPLETE_SUBTYPE_INDICATION) {
        return new VHDLIElementIncompleteSubtypeIndicationImpl(node);
      }
      else if (type == I_ELEMENT_SIMPLE_NAME) {
        return new VHDLIElementSimpleNameImpl(node);
      }
      else if (type == I_ELEMENT_SUBTYPE_INDICATION) {
        return new VHDLIElementSubtypeIndicationImpl(node);
      }
      else if (type == I_ENTITY_NAME) {
        return new VHDLIEntityNameImpl(node);
      }
      else if (type == I_ENTITY_SIMPLE_NAME) {
        return new VHDLIEntitySimpleNameImpl(node);
      }
      else if (type == I_FILE_INCOMPLETE_TYPE_MARK) {
        return new VHDLIFileIncompleteTypeMarkImpl(node);
      }
      else if (type == I_FILE_NAME) {
        return new VHDLIFileNameImpl(node);
      }
      else if (type == I_FORMAL_GENERIC_CLAUSE) {
        return new VHDLIFormalGenericClauseImpl(node);
      }
      else if (type == I_FORMAL_PORT_CLAUSE) {
        return new VHDLIFormalPortClauseImpl(node);
      }
      else if (type == I_FUNCTION_NAME) {
        return new VHDLIFunctionNameImpl(node);
      }
      else if (type == I_GENERATE_LABEL) {
        return new VHDLIGenerateLabelImpl(node);
      }
      else if (type == I_GENERATE_PARAMETER_SPECIFICATION) {
        return new VHDLIGenerateParameterSpecificationImpl(node);
      }
      else if (type == I_GENERIC_ASSOCIATION_LIST) {
        return new VHDLIGenericAssociationListImpl(node);
      }
      else if (type == I_GENERIC_INTERFACE_LIST) {
        return new VHDLIGenericInterfaceListImpl(node);
      }
      else if (type == I_GENERIC_NAME) {
        return new VHDLIGenericNameImpl(node);
      }
      else if (type == I_GUARDED_SIGNAL_LIST) {
        return new VHDLIGuardedSignalListImpl(node);
      }
      else if (type == I_GUARD_CONDITION) {
        return new VHDLIGuardConditionImpl(node);
      }
      else if (type == I_IF_LABEL) {
        return new VHDLIIfLabelImpl(node);
      }
      else if (type == I_INSTANTIATION_LABEL) {
        return new VHDLIInstantiationLabelImpl(node);
      }
      else if (type == I_LIBRARY_LOGICAL_NAME) {
        return new VHDLILibraryLogicalNameImpl(node);
      }
      else if (type == I_LOCAL_GENERIC_CLAUSE) {
        return new VHDLILocalGenericClauseImpl(node);
      }
      else if (type == I_LOCAL_PORT_CLAUSE) {
        return new VHDLILocalPortClauseImpl(node);
      }
      else if (type == I_LOOP_LABEL) {
        return new VHDLILoopLabelImpl(node);
      }
      else if (type == I_LOOP_PARAMETER_SPECIFICATION) {
        return new VHDLILoopParameterSpecificationImpl(node);
      }
      else if (type == I_OBJECT_SIMPLE_NAME) {
        return new VHDLIObjectSimpleNameImpl(node);
      }
      else if (type == I_PACKAGE_SIMPLE_NAME) {
        return new VHDLIPackageSimpleNameImpl(node);
      }
      else if (type == I_PARAMETER_ASSOCIATION_LIST) {
        return new VHDLIParameterAssociationListImpl(node);
      }
      else if (type == I_PARAMETER_INTERFACE_LIST) {
        return new VHDLIParameterInterfaceListImpl(node);
      }
      else if (type == I_PARAMETER_NAME) {
        return new VHDLIParameterNameImpl(node);
      }
      else if (type == I_PASSIVE_CONCURRENT_PROCEDURE_CALL_STATEMENT) {
        return new VHDLIPassiveConcurrentProcedureCallStatementImpl(node);
      }
      else if (type == I_PASSIVE_PROCESS_STATEMENT) {
        return new VHDLIPassiveProcessStatementImpl(node);
      }
      else if (type == I_PORT_ASSOCIATION_LIST) {
        return new VHDLIPortAssociationListImpl(node);
      }
      else if (type == I_PORT_INTERFACE_LIST) {
        return new VHDLIPortInterfaceListImpl(node);
      }
      else if (type == I_PORT_NAME) {
        return new VHDLIPortNameImpl(node);
      }
      else if (type == I_PROCEDURE_NAME) {
        return new VHDLIProcedureNameImpl(node);
      }
      else if (type == I_PROCESS_LABEL) {
        return new VHDLIProcessLabelImpl(node);
      }
      else if (type == I_PSL_CLOCK_DECLARATION) {
        return new VHDLIPSLClockDeclarationImpl(node);
      }
      else if (type == I_PSL_DIRECTIVE) {
        return new VHDLIPSLDirectiveImpl(node);
      }
      else if (type == I_PSL_PROPERTY_DECLARATION) {
        return new VHDLIPSLPropertyDeclarationImpl(node);
      }
      else if (type == I_PSL_SEQUENCE_DECLARATION) {
        return new VHDLIPSLSequenceDeclarationImpl(node);
      }
      else if (type == I_PSL_VERIFICATION_UNIT) {
        return new VHDLIPSLVerificationUnitImpl(node);
      }
      else if (type == I_RANGE_ATTRIBUTE_NAME) {
        return new VHDLIRangeAttributeNameImpl(node);
      }
      else if (type == I_RANGE_EXPRESSION) {
        return new VHDLIRangeExpressionImpl(node);
      }
      else if (type == I_RETURN_IDENTIFIER) {
        return new VHDLIReturnIdentifierImpl(node);
      }
      else if (type == I_SHARED_VARIABLE_DECLARATION) {
        return new VHDLISharedVariableDeclarationImpl(node);
      }
      else if (type == I_SIGNAL_MODE_INDICATION) {
        return new VHDLISignalModeIndicationImpl(node);
      }
      else if (type == I_SIGNAL_NAME) {
        return new VHDLISignalNameImpl(node);
      }
      else if (type == I_STATIC_CONDITIONAL_EXPRESSION) {
        return new VHDLIStaticConditionalExpressionImpl(node);
      }
      else if (type == I_STATIC_DISCRETE_RANGE) {
        return new VHDLIStaticDiscreteRangeImpl(node);
      }
      else if (type == I_STATIC_EXPRESSION) {
        return new VHDLIStaticExpressionImpl(node);
      }
      else if (type == I_STRING_EXPRESSION) {
        return new VHDLIStringExpressionImpl(node);
      }
      else if (type == I_SUBPROGRAM_NAME) {
        return new VHDLISubprogramNameImpl(node);
      }
      else if (type == I_SUBTYPE_NAME) {
        return new VHDLISubtypeNameImpl(node);
      }
      else if (type == I_TIME_EXPRESSION) {
        return new VHDLITimeExpressionImpl(node);
      }
      else if (type == I_TYPE_NAME) {
        return new VHDLITypeNameImpl(node);
      }
      else if (type == I_UNARY_LOGICAL_OPERATOR) {
        return new VHDLIUnaryLogicalOperatorImpl(node);
      }
      else if (type == I_UNIT_NAME) {
        return new VHDLIUnitNameImpl(node);
      }
      else if (type == I_UNRESOLVED_ARRAY_SUBTYPE_INDICATION) {
        return new VHDLIUnresolvedArraySubtypeIndicationImpl(node);
      }
      else if (type == I_UNRESOLVED_RECORD_SUBTYPE_INDICATION) {
        return new VHDLIUnresolvedRecordSubtypeIndicationImpl(node);
      }
      else if (type == I_VALUE_EXPRESSION) {
        return new VHDLIValueExpressionImpl(node);
      }
      else if (type == I_VARIABLE_NAME) {
        return new VHDLIVariableNameImpl(node);
      }
      else if (type == LABEL) {
        return new VHDLLabelImpl(node);
      }
      else if (type == LIBRARY_CLAUSE) {
        return new VHDLLibraryClauseImpl(node);
      }
      else if (type == LIBRARY_UNIT) {
        return new VHDLLibraryUnitImpl(node);
      }
      else if (type == LITERAL) {
        return new VHDLLiteralImpl(node);
      }
      else if (type == LOGICAL_EXPRESSION) {
        return new VHDLLogicalExpressionImpl(node);
      }
      else if (type == LOGICAL_NAME) {
        return new VHDLLogicalNameImpl(node);
      }
      else if (type == LOGICAL_NAME_LIST) {
        return new VHDLLogicalNameListImpl(node);
      }
      else if (type == LOGICAL_OPERATOR) {
        return new VHDLLogicalOperatorImpl(node);
      }
      else if (type == LOOP_STATEMENT) {
        return new VHDLLoopStatementImpl(node);
      }
      else if (type == MODE) {
        return new VHDLModeImpl(node);
      }
      else if (type == MODE_INDICATION) {
        return new VHDLModeIndicationImpl(node);
      }
      else if (type == MODE_VIEW_DECLARATION) {
        return new VHDLModeViewDeclarationImpl(node);
      }
      else if (type == MODE_VIEW_ELEMENT_DEFINITION) {
        return new VHDLModeViewElementDefinitionImpl(node);
      }
      else if (type == MODE_VIEW_INDICATION) {
        return new VHDLModeViewIndicationImpl(node);
      }
      else if (type == MULTIPLYING_OPERATOR) {
        return new VHDLMultiplyingOperatorImpl(node);
      }
      else if (type == NAME_S) {
        return new VHDLNameSImpl(node);
      }
      else if (type == NEXT_STATEMENT) {
        return new VHDLNextStatementImpl(node);
      }
      else if (type == NULL_STATEMENT) {
        return new VHDLNullStatementImpl(node);
      }
      else if (type == NUMERIC_LITERAL) {
        return new VHDLNumericLiteralImpl(node);
      }
      else if (type == OBJECT_DECLARATION) {
        return new VHDLObjectDeclarationImpl(node);
      }
      else if (type == OPERATOR_SYMBOL) {
        return new VHDLOperatorSymbolImpl(node);
      }
      else if (type == PACKAGE_BODY) {
        return new VHDLPackageBodyImpl(node);
      }
      else if (type == PACKAGE_BODY_DECLARATIVE_ITEM) {
        return new VHDLPackageBodyDeclarativeItemImpl(node);
      }
      else if (type == PACKAGE_DECLARATION) {
        return new VHDLPackageDeclarationImpl(node);
      }
      else if (type == PACKAGE_DECLARATIVE_ITEM) {
        return new VHDLPackageDeclarativeItemImpl(node);
      }
      else if (type == PACKAGE_HEADER) {
        return new VHDLPackageHeaderImpl(node);
      }
      else if (type == PACKAGE_INSTANTIATION_DECLARATION) {
        return new VHDLPackageInstantiationDeclarationImpl(node);
      }
      else if (type == PACKAGE_PATHNAME) {
        return new VHDLPackagePathnameImpl(node);
      }
      else if (type == PARAMETER_MAP_ASPECT) {
        return new VHDLParameterMapAspectImpl(node);
      }
      else if (type == PARAMETER_SPECIFICATION) {
        return new VHDLParameterSpecificationImpl(node);
      }
      else if (type == PARTIAL_PATHNAME) {
        return new VHDLPartialPathnameImpl(node);
      }
      else if (type == PATHNAME_ELEMENT) {
        return new VHDLPathnameElementImpl(node);
      }
      else if (type == PHYSICAL_INCOMPLETE_TYPE_DEFINITION) {
        return new VHDLPhysicalIncompleteTypeDefinitionImpl(node);
      }
      else if (type == PHYSICAL_LITERAL) {
        return new VHDLPhysicalLiteralImpl(node);
      }
      else if (type == PHYSICAL_TYPE_DEFINITION) {
        return new VHDLPhysicalTypeDefinitionImpl(node);
      }
      else if (type == PLAIN_RETURN_STATEMENT) {
        return new VHDLPlainReturnStatementImpl(node);
      }
      else if (type == PORT_CLAUSE) {
        return new VHDLPortClauseImpl(node);
      }
      else if (type == PORT_LIST) {
        return new VHDLPortListImpl(node);
      }
      else if (type == PORT_MAP_ASPECT) {
        return new VHDLPortMapAspectImpl(node);
      }
      else if (type == PREFIX) {
        return new VHDLPrefixImpl(node);
      }
      else if (type == PRIMARY) {
        return new VHDLPrimaryImpl(node);
      }
      else if (type == PRIMARY_UNIT) {
        return new VHDLPrimaryUnitImpl(node);
      }
      else if (type == PRIMARY_UNIT_DECLARATION) {
        return new VHDLPrimaryUnitDeclarationImpl(node);
      }
      else if (type == PRIVATE_INCOMPLETE_TYPE_DEFINITION) {
        return new VHDLPrivateIncompleteTypeDefinitionImpl(node);
      }
      else if (type == PRIVATE_VARIABLE_DECLARATION) {
        return new VHDLPrivateVariableDeclarationImpl(node);
      }
      else if (type == PROCEDURE_CALL) {
        return new VHDLProcedureCallImpl(node);
      }
      else if (type == PROCEDURE_CALL_STATEMENT) {
        return new VHDLProcedureCallStatementImpl(node);
      }
      else if (type == PROCEDURE_SPECIFICATION) {
        return new VHDLProcedureSpecificationImpl(node);
      }
      else if (type == PROCESS_DECLARATIVE_ITEM) {
        return new VHDLProcessDeclarativeItemImpl(node);
      }
      else if (type == PROCESS_DECLARATIVE_PART) {
        return new VHDLProcessDeclarativePartImpl(node);
      }
      else if (type == PROCESS_SENSITIVITY_LIST) {
        return new VHDLProcessSensitivityListImpl(node);
      }
      else if (type == PROCESS_STATEMENT) {
        return new VHDLProcessStatementImpl(node);
      }
      else if (type == PROCESS_STATEMENT_PART) {
        return new VHDLProcessStatementPartImpl(node);
      }
      else if (type == PROTECTED_TYPE_BODY) {
        return new VHDLProtectedTypeBodyImpl(node);
      }
      else if (type == PROTECTED_TYPE_BODY_DECLARATIVE_ITEM) {
        return new VHDLProtectedTypeBodyDeclarativeItemImpl(node);
      }
      else if (type == PROTECTED_TYPE_DECLARATION) {
        return new VHDLProtectedTypeDeclarationImpl(node);
      }
      else if (type == PROTECTED_TYPE_DECLARATIVE_ITEM) {
        return new VHDLProtectedTypeDeclarativeItemImpl(node);
      }
      else if (type == PROTECTED_TYPE_DEFINITION) {
        return new VHDLProtectedTypeDefinitionImpl(node);
      }
      else if (type == PROTECTED_TYPE_HEADER) {
        return new VHDLProtectedTypeHeaderImpl(node);
      }
      else if (type == PROTECTED_TYPE_INSTANTIATION_DEFINITION) {
        return new VHDLProtectedTypeInstantiationDefinitionImpl(node);
      }
      else if (type == QUALIFIED_XPRESSION) {
        return new VHDLQualifiedXpressionImpl(node);
      }
      else if (type == RANGE) {
        return new VHDLRangeImpl(node);
      }
      else if (type == RANGE_CONSTRAINT) {
        return new VHDLRangeConstraintImpl(node);
      }
      else if (type == RECORD_CONSTRAINT) {
        return new VHDLRecordConstraintImpl(node);
      }
      else if (type == RECORD_ELEMENT_CONSTRAINT) {
        return new VHDLRecordElementConstraintImpl(node);
      }
      else if (type == RECORD_ELEMENT_LIST) {
        return new VHDLRecordElementListImpl(node);
      }
      else if (type == RECORD_ELEMENT_RESOLUTION) {
        return new VHDLRecordElementResolutionImpl(node);
      }
      else if (type == RECORD_MODE_VIEW_INDICATION) {
        return new VHDLRecordModeViewIndicationImpl(node);
      }
      else if (type == RECORD_RESOLUTION) {
        return new VHDLRecordResolutionImpl(node);
      }
      else if (type == RECORD_TYPE_DEFINITION) {
        return new VHDLRecordTypeDefinitionImpl(node);
      }
      else if (type == RELATION) {
        return new VHDLRelationImpl(node);
      }
      else if (type == RELATIONAL_OPERATOR) {
        return new VHDLRelationalOperatorImpl(node);
      }
      else if (type == RELATIVE_PATHNAME) {
        return new VHDLRelativePathnameImpl(node);
      }
      else if (type == REPORT_STATEMENT) {
        return new VHDLReportStatementImpl(node);
      }
      else if (type == RESOLUTION_INDICATION) {
        return new VHDLResolutionIndicationImpl(node);
      }
      else if (type == RETURN_STATEMENT) {
        return new VHDLReturnStatementImpl(node);
      }
      else if (type == SCALAR_INCOMPLETE_TYPE_DEFINITION) {
        return new VHDLScalarIncompleteTypeDefinitionImpl(node);
      }
      else if (type == SCALAR_TYPE_DEFINITION) {
        return new VHDLScalarTypeDefinitionImpl(node);
      }
      else if (type == SECONDARY_UNIT) {
        return new VHDLSecondaryUnitImpl(node);
      }
      else if (type == SECONDARY_UNIT_DECLARATION) {
        return new VHDLSecondaryUnitDeclarationImpl(node);
      }
      else if (type == SELECTED_EXPRESSIONS) {
        return new VHDLSelectedExpressionsImpl(node);
      }
      else if (type == SELECTED_FORCE_ASSIGNMENT) {
        return new VHDLSelectedForceAssignmentImpl(node);
      }
      else if (type == SELECTED_NAME) {
        return new VHDLSelectedNameImpl(node);
      }
      else if (type == SELECTED_SIGNAL_ASSIGNMENT) {
        return new VHDLSelectedSignalAssignmentImpl(node);
      }
      else if (type == SELECTED_VARIABLE_ASSIGNMENT) {
        return new VHDLSelectedVariableAssignmentImpl(node);
      }
      else if (type == SELECTED_WAVEFORMS) {
        return new VHDLSelectedWaveformsImpl(node);
      }
      else if (type == SELECTED_WAVEFORM_ASSIGNMENT) {
        return new VHDLSelectedWaveformAssignmentImpl(node);
      }
      else if (type == SENSITIVITY_CLAUSE) {
        return new VHDLSensitivityClauseImpl(node);
      }
      else if (type == SENSITIVITY_LIST) {
        return new VHDLSensitivityListImpl(node);
      }
      else if (type == SEQUENCE_OF_STATEMENTS) {
        return new VHDLSequenceOfStatementsImpl(node);
      }
      else if (type == SEQUENTIAL_BLOCK_DECLARATIVE_PART) {
        return new VHDLSequentialBlockDeclarativePartImpl(node);
      }
      else if (type == SEQUENTIAL_BLOCK_STATEMENT) {
        return new VHDLSequentialBlockStatementImpl(node);
      }
      else if (type == SEQUENTIAL_BLOCK_STATEMENT_PART) {
        return new VHDLSequentialBlockStatementPartImpl(node);
      }
      else if (type == SEQUENTIAL_STATEMENT) {
        return new VHDLSequentialStatementImpl(node);
      }
      else if (type == SEQUENTIAL_STATEMENT_BODY) {
        return new VHDLSequentialStatementBodyImpl(node);
      }
      else if (type == SEQUENTIAL_STATEMENT_DECLARATIVE_PART) {
        return new VHDLSequentialStatementDeclarativePartImpl(node);
      }
      else if (type == SHARED_VARIABLE_DECLARATION) {
        return new VHDLSharedVariableDeclarationImpl(node);
      }
      else if (type == SHIFT_EXPRESSION) {
        return new VHDLShiftExpressionImpl(node);
      }
      else if (type == SHIFT_OPERATOR) {
        return new VHDLShiftOperatorImpl(node);
      }
      else if (type == SIGN) {
        return new VHDLSignImpl(node);
      }
      else if (type == SIGNAL_ASSIGNMENT_STATEMENT) {
        return new VHDLSignalAssignmentStatementImpl(node);
      }
      else if (type == SIGNAL_DECLARATION) {
        return new VHDLSignalDeclarationImpl(node);
      }
      else if (type == SIGNAL_KIND) {
        return new VHDLSignalKindImpl(node);
      }
      else if (type == SIGNAL_LIST) {
        return new VHDLSignalListImpl(node);
      }
      else if (type == SIGNATURE) {
        return new VHDLSignatureImpl(node);
      }
      else if (type == SIMPLE_CONFIGURATION_SPECIFICATION) {
        return new VHDLSimpleConfigurationSpecificationImpl(node);
      }
      else if (type == SIMPLE_EXPRESSION) {
        return new VHDLSimpleExpressionImpl(node);
      }
      else if (type == SIMPLE_FORCE_ASSIGNMENT) {
        return new VHDLSimpleForceAssignmentImpl(node);
      }
      else if (type == SIMPLE_MODE_INDICATION) {
        return new VHDLSimpleModeIndicationImpl(node);
      }
      else if (type == SIMPLE_NAME) {
        return new VHDLSimpleNameImpl(node);
      }
      else if (type == SIMPLE_RANGE) {
        return new VHDLSimpleRangeImpl(node);
      }
      else if (type == SIMPLE_RELEASE_ASSIGNMENT) {
        return new VHDLSimpleReleaseAssignmentImpl(node);
      }
      else if (type == SIMPLE_SIGNAL_ASSIGNMENT) {
        return new VHDLSimpleSignalAssignmentImpl(node);
      }
      else if (type == SIMPLE_VARIABLE_ASSIGNMENT) {
        return new VHDLSimpleVariableAssignmentImpl(node);
      }
      else if (type == SIMPLE_WAVEFORM_ASSIGNMENT) {
        return new VHDLSimpleWaveformAssignmentImpl(node);
      }
      else if (type == SINGLE_LINE_COMMENT) {
        return new VHDLSingleLineCommentImpl(node);
      }
      else if (type == SLICE_NAME) {
        return new VHDLSliceNameImpl(node);
      }
      else if (type == STRING_LITERAL) {
        return new VHDLStringLiteralImpl(node);
      }
      else if (type == SUBPROGRAM_BODY) {
        return new VHDLSubprogramBodyImpl(node);
      }
      else if (type == SUBPROGRAM_DECLARATION) {
        return new VHDLSubprogramDeclarationImpl(node);
      }
      else if (type == SUBPROGRAM_DECLARATIVE_ITEM) {
        return new VHDLSubprogramDeclarativeItemImpl(node);
      }
      else if (type == SUBPROGRAM_HEADER) {
        return new VHDLSubprogramHeaderImpl(node);
      }
      else if (type == SUBPROGRAM_INSTANTIATION_DECLARATION) {
        return new VHDLSubprogramInstantiationDeclarationImpl(node);
      }
      else if (type == SUBPROGRAM_KIND) {
        return new VHDLSubprogramKindImpl(node);
      }
      else if (type == SUBPROGRAM_SPECIFICATION) {
        return new VHDLSubprogramSpecificationImpl(node);
      }
      else if (type == SUBTYPE_DECLARATION) {
        return new VHDLSubtypeDeclarationImpl(node);
      }
      else if (type == SUBTYPE_INDICATION) {
        return new VHDLSubtypeIndicationImpl(node);
      }
      else if (type == SUFFIX) {
        return new VHDLSuffixImpl(node);
      }
      else if (type == TARGET) {
        return new VHDLTargetImpl(node);
      }
      else if (type == TERM) {
        return new VHDLTermImpl(node);
      }
      else if (type == TIMEOUT_CLAUSE) {
        return new VHDLTimeoutClauseImpl(node);
      }
      else if (type == TYPE_CONVERSION) {
        return new VHDLTypeConversionImpl(node);
      }
      else if (type == TYPE_DECLARATION) {
        return new VHDLTypeDeclarationImpl(node);
      }
      else if (type == TYPE_DEFINITION) {
        return new VHDLTypeDefinitionImpl(node);
      }
      else if (type == TYPE_MARK) {
        return new VHDLTypeMarkImpl(node);
      }
      else if (type == UNARY_EXPRESSION) {
        return new VHDLUnaryExpressionImpl(node);
      }
      else if (type == UNARY_MISCELLANEOUS_OPERATOR) {
        return new VHDLUnaryMiscellaneousOperatorImpl(node);
      }
      else if (type == UNBOUNDED_ARRAY_DEFINITION) {
        return new VHDLUnboundedArrayDefinitionImpl(node);
      }
      else if (type == UNSPECIFIED_TYPE_INDICATION) {
        return new VHDLUnspecifiedTypeIndicationImpl(node);
      }
      else if (type == USE_CLAUSE) {
        return new VHDLUseClauseImpl(node);
      }
      else if (type == VALUE_RETURN_STATEMENT) {
        return new VHDLValueReturnStatementImpl(node);
      }
      else if (type == VARIABLE_ASSIGNMENT_STATEMENT) {
        return new VHDLVariableAssignmentStatementImpl(node);
      }
      else if (type == VARIABLE_DECLARATION) {
        return new VHDLVariableDeclarationImpl(node);
      }
      else if (type == VERIFICATION_UNIT_BINDING_INDICATION) {
        return new VHDLVerificationUnitBindingIndicationImpl(node);
      }
      else if (type == VERIFICATION_UNIT_LIST) {
        return new VHDLVerificationUnitListImpl(node);
      }
      else if (type == WAIT_STATEMENT) {
        return new VHDLWaitStatementImpl(node);
      }
      else if (type == WAVEFORM) {
        return new VHDLWaveformImpl(node);
      }
      else if (type == WAVEFORM_ELEMENT) {
        return new VHDLWaveformElementImpl(node);
      }
      throw new AssertionError("Unknown element type: " + type);
    }
  }
}
